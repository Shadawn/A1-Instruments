//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ПРИМЕР ВЫЗОВА ФУНКЦИИ
//
// ВнешниеОбработки.Создать("C:\КонсольЗапросовУФ.epf", Ложь).ОбработатьВнешнийЗапрос(Запрос, "РезультатыЗапроса");
//
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
Перем мВерсияОбработки;


Процедура ОбработатьЗапрос(ппСтруктураДанных = Неопределено, ппМВТ = Неопределено) Экспорт
	
	Если ппСтруктураДанных = Неопределено Тогда
		ппПутьКХранилищу = ЭтотОбъект.ПутьКХранилищу;
		ппХранилище = ПолучитьИзВременногоХранилища(ппПутьКХранилищу);
	Иначе	
		ппХранилище = ппСтруктураДанных;
	КонецЕсли; 
	
	ппХранилище.СтруктураРезультатовЗапросов.Очистить();
	
	ЗапросИД = ппХранилище.ОписаниеТекущейВеткиДЗ.ИД;
	
	ппОтбор = Новый Структура("ИД", ЗапросИД);
	МассивПараметров = ппХранилище.ТабПараметров.НайтиСтроки(ппОтбор);
	
	ОбщийТабДок = Новый ТабличныйДокумент;
	ОбластьСтрока = ОбщийТабДок.ПолучитьОбласть("R2");
	
	ппЗапрос = Новый Запрос;
	Если ппМВТ = Неопределено Тогда
		ппЗапрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Иначе
		ппЗапрос.МенеджерВременныхТаблиц = ппМВТ;
	КонецЕсли;
	
	// ++ 08.09.2015 Доработка от tristarr1
	ЕстьОшибки = Ложь;
	МассивСообщений = Новый Массив;
	// -- 08.09.2015 Доработка от tristarr1
	
	// Установка параметров
	Для каждого Элемент Из МассивПараметров Цикл
		Если Элемент.Используется Тогда
			// ++ 08.09.2015 Доработка от tristarr1
			//ппЗапрос.УстановитьПараметр(Элемент.Название, Элемент.Значение);
			Если Элемент.Вычисляемый Тогда
				Попытка
					// ++ AKOR 24.09.2015 Проверка на наличие используемых переменных.
					ОписаниеОшибки = ПроверитНаличиеИспользуемыхПеременных(Элемент.Значение);
					Если НЕ ПустаяСтрока(ОписаниеОшибки) Тогда
						ЕстьОшибки = Истина;
						СообщениеП = Новый СообщениеПользователю;
						СообщениеП.Текст = ОписаниеОшибки;
						МассивСообщений.Добавить(СообщениеП);
					Иначе	
					// -- AKOR 24.09.2015 
						Параметр = Неопределено;
						Выполнить(Элемент.Значение);
						ппЗапрос.УстановитьПараметр(Элемент.Название,Параметр);
					// ++ AKOR 24.09.2015 Проверка на наличие используемых переменных.
					КонецЕсли; 
					// -- AKOR 24.09.2015 
				Исключение
					ЕстьОшибки = Истина;
					СообщениеП = Новый СообщениеПользователю;
					ОписаниеОшибки = ИнформацияОбОшибке();
					СообщениеП.Текст = ("Ошибка при установке параметра " + Элемент.Название + " " + ПодробноеПредставлениеОшибки(ОписаниеОшибки));
					МассивСообщений.Добавить(СообщениеП);
				КонецПопытки;
			Иначе
				ппЗапрос.УстановитьПараметр(Элемент.Название,Элемент.Значение);	
			КонецЕсли;
			// -- 08.09.2015 Доработка от tristarr1
		КонецЕсли;
	КонецЦикла;
	
	// ++ 08.09.2015 Доработка от tristarr1
	Если НЕ ЕстьОшибки Тогда
	// -- 08.09.2015 Доработка от tristarr1
		
		ТаблицаПакетов = ппХранилище.ТаблицаПакетов.НайтиСтроки(ппОтбор);;
		Линия = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная,1);
		
		СтрокаПоиска = "А" + "_" + Строка(ЗапросИД) + "_";
		Для каждого ЭлементСтруктуры Из ппХранилище.СтруктураТЗ Цикл
			Если Найти(ЭлементСтруктуры.Ключ, СтрокаПоиска) Тогда
				Если ппХранилище.СтруктураТЗ.Свойство(ЭлементСтруктуры.Ключ) Тогда
					ппХранилище.СтруктураТЗ.Удалить(ЭлементСтруктуры.Ключ);
				КонецЕсли; 
			КонецЕсли;
		КонецЦикла; 
		
		Для каждого СтрокаПакета Из ТаблицаПакетов Цикл
			
			ппЗапрос.Текст = СтрокаПакета.ТекстПакета;
			
			Начало = ТекущаяУниверсальнаяДатаВМиллисекундах();
			РезультатЗапроса = ппЗапрос.Выполнить();
			Конец  = ТекущаяУниверсальнаяДатаВМиллисекундах();
			
			ВремяВыполнения = (Конец - Начало) / 1000;
			СтрокаПакета.ВремяВыполнения = ВремяВыполнения;
			
			ТекСтрока = ОбщийТабДок.ВысотаТаблицы + 2;
			ОблЗаголовка = ОбщийТабДок.Область(ТекСтрока, 1);
			
			Если СтрокаПакета.Показать Тогда
				Если Лев(СтрокаПакета.ТекстПакета, 10) = "УНИЧТОЖИТЬ" ИЛИ Лев(СтрокаПакета.ТекстПакета, 4) = "DROP" Тогда
					ОблЗаголовка.Текст = СтрокаПакета.ТекстПакета + " (" + ВремяВыполнения + " мс.)";
					ОблЗаголовка.Шрифт = Новый Шрифт( , , 14, Истина);
					ОблЗаголовка.ЦветТекста = WebЦвета.Красный;
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			
			Выборка = РезультатЗапроса.Выбрать();
			КоличествоСтрок = Выборка.Количество();
			
			Если СтрокаПакета.ЭтоВТ Тогда
				ппЗапрос.Текст = "ВЫБРАТЬ * ИЗ " + СтрокаПакета.ИмяПакета;
				РезультатЗапроса = ппЗапрос.Выполнить();
				Выборка = РезультатЗапроса.Выбрать();
				КоличествоСтрок = Выборка.Количество();
			КонецЕсли; 
			СтрокаПакета.КоличествоСтрок = КоличествоСтрок;
			
			// ++ 99999999999999999999
			Если (НЕ СтрокаПакета.Выгрузить) И (НЕ СтрокаПакета.Показать) Тогда
				Продолжить;
			КонецЕсли; 
			
			пВыгрузить = СтрокаПакета.Выгрузить;
			пПоказать = СтрокаПакета.Показать;
			
			Если ЭтотОбъект.ЛимитВыводимыхСтрок > 0 Тогда
				МаксКолСтрок = ЭтотОбъект.ЛимитВыводимыхСтрок;
				ВыгрузитьВместоПоказа = (КоличествоСтрок > МаксКолСтрок) И СтрокаПакета.Показать;
				
				Если ВыгрузитьВместоПоказа Тогда
					СтрокаПакета.Выгрузить = Истина;
					пВыгрузить = Истина;
					пПоказать = Ложь;
					
					ОблЗаголовка.Шрифт = Новый Шрифт( , , 14, );
					ОблЗаголовка.Примечание.Текст = СтрокаПакета.ТекстПакета;
					ОблЗаголовка.Примечание.АвтоРазмер = Истина;
					ОблЗаголовка.Текст = СтрокаПакета.ИмяПакета + " (" + ВремяВыполнения + " мс., строк: " + Строка(КоличествоСтрок) + ")";
					
					ТекСтрока = ОбщийТабДок.ВысотаТаблицы + 2;
					ОблЗаголовка = ОбщийТабДок.Область(ТекСтрока, 1);
					
					ОблЗаголовка.Шрифт = Новый Шрифт( , , 14, );
					ОблЗаголовка.Текст = "Данные таблицы не выведена в табличный документ, т.к. превышен лимит выводимых строк (максимум: " + МаксКолСтрок + " строк). Результат смотрите в выгрузке.";
				КонецЕсли; 
			КонецЕсли;
			// -- 99999999999999999999
			
			Если пВыгрузить Тогда
				Выгрузка = РезультатЗапроса.Выгрузить();
				Адрес = "А" + "_" + Строка(СтрокаПакета.ИД) + "_" + Строка(СтрокаПакета.ИмяПакета);
				ппХранилище.СтруктураТЗ.Вставить(Адрес, Выгрузка);
				СтрокаПакета.Адрес = Адрес;
			Иначе
				СтрокаПакета.Адрес = "";
			КонецЕсли;
			
			Если пПоказать Тогда
				ОблЗаголовка.Шрифт = Новый Шрифт( , , 14, );//Истина
				ОблЗаголовка.Примечание.Текст = СтрокаПакета.ТекстПакета;
				ОблЗаголовка.Примечание.АвтоРазмер = Истина;
				ОблЗаголовка.Текст = СтрокаПакета.ИмяПакета + " (" + ВремяВыполнения + " мс., строк: " + Строка(КоличествоСтрок) + ")";
				
				ОбщийТабДок.НачатьАвтогруппировкуСтрок();
				ТабДок = Новый ТабличныйДокумент;
				
				Колонки = РезультатЗапроса.Колонки;
				ШириныКолонок = Новый Структура;
				
				КоличествоКолонок = Колонки.Количество();
				
				// Шапка таблицы.
				ОбластьСтрока.Очистить();
				Для СчКол = 1 По КоличествоКолонок Цикл
					ШириныКолонок.Вставить(Колонки[СчКол - 1].Имя, 0);
					ОблЯчейки = ОбластьСтрока.Область(1, СчКол);
					ОблЯчейки.Текст = Колонки[СчКол - 1].Имя;
					ОблЯчейки.ЦветФона = ЦветаСтиля.ЦветФонаШапкиОтчета;
					ОблЯчейки.Примечание.Текст = Строка(Колонки[СчКол - 1].ТипЗначения);
					ОблЯчейки.Обвести(Линия, Линия, Линия, Линия);
					ОблЯчейки.ЦветРамки = ЦветаСтиля.ЦветЛинииОтчета;
				КонецЦикла;
				ОбщийТабДок.Вывести(ОбластьСтрока);
				
				СтрокаНачала = ОбщийТабДок.ВысотаТаблицы; // для группировки
				// Вывод строки.
				Пока Выборка.Следующий() Цикл
					ОбластьСтрока.Очистить();
					ОбластьСтрока.Область(1, 1).АвтоОтступ = Выборка.Уровень();
					Для СчКол = 1 По КоличествоКолонок Цикл
						ОблЯчейки = ОбластьСтрока.Область(1, СчКол);
						Оформление = ПараметрыДляОтображенияЯчейки(Выборка[СчКол-1], ппХранилище);
						ШириныКолонок[Колонки[СчКол - 1].Имя] = Макс(ШириныКолонок[Колонки[СчКол - 1].Имя], Оформление.Ширина);
						ОблЯчейки.Текст = Оформление.Текст;
						ОблЯчейки.ЦветТекста = Оформление.ЦветТекста;
						ОблЯчейки.Расшифровка = Оформление.Значение;
						ОблЯчейки.Обвести(Линия, Линия, Линия, Линия);
						ОблЯчейки.ЦветРамки = ЦветаСтиля.ЦветЛинииОтчета;
					КонецЦикла;
					ОбщийТабДок.Вывести(ОбластьСтрока, Выборка.Уровень());
				КонецЦикла;
				
				ОбластьТаблицы = ОбщийТабДок.Область(СтрокаНачала, , ОбщийТабДок.ВысотаТаблицы, );
				ОбластьТаблицы.СоздатьФорматСтрок();
				ОбщийТабДок.Область(СтрокаНачала + 1, , ОбщийТабДок.ВысотаТаблицы, ).Сгруппировать();
				ОбластьТаблицы.РежимИзмененияРазмераКолонки  = РежимИзмененияРазмера.БыстроеИзменение;
				
				ШиринаКолонки = 0;
				
				Для СчКол = 1 По КоличествоКолонок Цикл
					ТипыЗначений = Колонки[СчКол - 1].ТипЗначения.Типы();
					ЭлементNull = ТипыЗначений.Найти(Тип("Null"));
					Если НЕ ЭлементNull = Неопределено Тогда
						ТипыЗначений.Удалить(ЭлементNull);
					КонецЕсли;
					
					ШиринаКолонки = Макс(5, ШириныКолонок[Колонки[СчКол - 1].Имя]);
					Для каждого ТипЗнач Из ТипыЗначений Цикл
						
						Если Документы.ТипВсеСсылки().СодержитТип(ТипЗнач) Тогда
							
							ОбъектМетаданных = Метаданные.НайтиПоТипу(ТипЗнач);
							Ширина = СтрДлина(ОбъектМетаданных.Синоним) + ОбъектМетаданных.ДлинаНомера + СтрДлина(" от 01.01.01 00:00:00");
							ШиринаКолонки = Макс(ШиринаКолонки, Ширина);
							
						ИначеЕсли Перечисления.ТипВсеСсылки().СодержитТип(ТипЗнач)Тогда
							
							ОбъектМетаданных = Метаданные.НайтиПоТипу(ТипЗнач);
							
							Ширина = 0;
							Для каждого ЗначПер Из ОбъектМетаданных.ЗначенияПеречисления Цикл
								Ширина = Макс(Ширина, СтрДлина(ЗначПер.Синоним));
							КонецЦикла; 
							
							ШиринаКолонки = Макс(ШиринаКолонки, Ширина);
							
							//ИначеЕсли  ТипЗнач = Тип("Дата") Тогда
							//	ШиринаКолонки = Макс(ШиринаКолонки, СтрДлина("01.01.01 00:00:00"));
						КонецЕсли;
						
					КонецЦикла;
					
					ШиринаКолонки = Макс(ШиринаКолонки, ШириныКолонок[Колонки[СчКол - 1].Имя]);
					
					ОблКол = ОбщийТабДок.Область(СтрокаНачала, СчКол, ОбщийТабДок.ВысотаТаблицы, СчКол);
					ОблКол.ШиринаКолонки = ШиринаКолонки;
				КонецЦикла; 
				
				ОбщийТабДок.ЗакончитьАвтогруппировкуСтрок();
			КонецЕсли;
			
		КонецЦикла; 
		
	// ++ 08.09.2015 Доработка от tristarr1
	Иначе
		
		Если МассивСообщений.Количество() Тогда
			Для Каждого Сообщение ИЗ МассивСообщений Цикл
				Сообщение.Сообщить();
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;
	// -- 08.09.2015 Доработка от tristarr1
	
	ппХранилище.Результат = ОбщийТабДок;
	
	Если ппСтруктураДанных = Неопределено Тогда
		ПоместитьВоВременноеХранилище(ппХранилище, ппПутьКХранилищу);
	КонецЕсли;
	
	ппЗапрос.МенеджерВременныхТаблиц = Неопределено;
	
КонецПроцедуры

Функция СоздатьТаблицуВТ(Знач ТекстДляРазбора) Экспорт
	
	ОчиститьТекстЗапросаОтКомментариев(ТекстДляРазбора);
	ОчиститьТекстЗапроса(ТекстДляРазбора);
	
	ВТ = Новый ТаблицаЗначений;
	ВТ.Колонки.Добавить("ИмяПакета", Новый ОписаниеТипов("Строка"));
	ВТ.Колонки.Добавить("ЭтоВТ", Новый ОписаниеТипов("Булево"));
	ВТ.Колонки.Добавить("ТекстПакета", Новый ОписаниеТипов("Строка"));
	
	Сч = 0;
	
	Пока СтрДлина(ТекстДляРазбора) > 0 Цикл
		
		НачалоВЫБРАТЬ = Найти(ВРег(ТекстДляРазбора), "ВЫБРАТЬ");
		Если НачалоВЫБРАТЬ = 0 Тогда
			НачалоВЫБРАТЬ = Найти(ВРег(ТекстДляРазбора), "SELECT");
		КонецЕсли; 
		
		НачалоУНИЧТОЖИТЬ = Найти(ВРег(ТекстДляРазбора), "УНИЧТОЖИТЬ");
		Если НачалоУНИЧТОЖИТЬ = 0 Тогда
			НачалоУНИЧТОЖИТЬ = Найти(ВРег(ТекстДляРазбора), "DROP");
		КонецЕсли; 
		
		Начало = Мин(НачалоВЫБРАТЬ, НачалоУНИЧТОЖИТЬ);
		
		Если Начало = 0 Тогда
			Начало = Макс(НачалоВЫБРАТЬ, НачалоУНИЧТОЖИТЬ);
		КонецЕсли;
		
		Если Начало = 0 Тогда
			Прервать;
		КонецЕсли;
		
		КонецПакета = Найти(ТекстДляРазбора, ";");
		КонецПакета = ?(КонецПакета = 0, СтрДлина(ТекстДляРазбора) + 1, КонецПакета);
		
		ТекстПакета = СокрЛП(Сред(ТекстДляРазбора, Начало, КонецПакета - Начало)); 
		ТекстДляРазбора = СокрЛП(Сред(ТекстДляРазбора, КонецПакета + 1));
		
		ПрисутствиеВТ = Найти(ВРег(ТекстПакета), "ПОМЕСТИТЬ");
		Если ПрисутствиеВТ > 0 Тогда
		    Оператор_Поместить_INTO = "ПОМЕСТИТЬ";
		КонецЕсли; 
		
		Если ПрисутствиеВТ = 0 Тогда
			ПрисутствиеВТ = Найти(ВРег(ТекстПакета), "INTO");
			Если ПрисутствиеВТ > 0 Тогда
			    Оператор_Поместить_INTO = "INTO";
			КонецЕсли; 
		КонецЕсли; 

		ИмяВТ = "";

		Если ПрисутствиеВТ <> 0 Тогда // "ПОМЕСТИТЬ" найдено.
			СлСимвол = ПрисутствиеВТ + СтрДлина(Оператор_Поместить_INTO);
			НеНайдено = Истина;
			Пока НеНайдено Цикл // ++ извлечение имени ВТ.
				ТекСимв = Сред(ТекстПакета, СлСимвол, 1);
				ТекСимв = СтрЗаменить(ТекСимв, " ", "");
				ТекСимв = СтрЗаменить(ТекСимв, "|", "");
				ТекСимв = СтрЗаменить(ТекСимв, Символы.ПС, "");
				ИмяВТ = ИмяВТ + ТекСимв;
				НеНайдено = ?(ИмяВТ <> "" И ТекСимв = "", Ложь, Истина);
				СлСимвол = СлСимвол + 1;
			КонецЦикла; // -- извлечение имени ВТ.
			ИмяПакета = СокрЛП(ИмяВТ);
		Иначе
			Сч = Сч + 1;
			ИмяПакета = "Результат" + Формат(Сч, "ЧГ=0");
		КонецЕсли;

		НоваяСтрока = ВТ.Добавить();
		НоваяСтрока.ИмяПакета = ИмяПакета;
		НоваяСтрока.ЭтоВТ = ПрисутствиеВТ <> 0;
		НоваяСтрока.ТекстПакета = ТекстПакета;
		
	КонецЦикла;
	
	Возврат ВТ;
	
КонецФункции

Процедура ПолучитьПараметрыЗапроса(Знач ТекстДляРазбора, ИД, СтруктураДанных = Неопределено) Экспорт
	
    ОчиститьТекстЗапросаОтКомментариев(ТекстДляРазбора);
    ОчиститьТекстЗапроса(ТекстДляРазбора);
	ТекстЗапроса = СокрЛП(ТекстДляРазбора);

	Если СтруктураДанных = Неопределено Тогда
		пХранилище = ПолучитьИзВременногоХранилища(ЭтотОбъект.ПутьКХранилищу);
	Иначе
		пХранилище = СтруктураДанных;
	КонецЕсли;
	
    // SG, вставка 05/06/15 >>>
    // пХранилище может быть неопределено
    Если    Не ЭтоАдресВременногоХранилища(пХранилище)
        И    Не ТипЗнч(пХранилище) = Тип("Структура") Тогда
        Возврат;
    КонецЕсли;
    // SG, вставка 05/06/15 <<<
	
	пТабПараметров = пХранилище.ТабПараметров;
	ОтборИД = Новый Структура("ИД", ИД);
	пТабПараметровИД = пТабПараметров.НайтиСтроки(ОтборИД);
	
	Для каждого Строка Из пТабПараметровИД Цикл
		Строка.Используется = Ложь;
	КонецЦикла; 
	
	// перезаполнение параметров запроса
	Если НЕ Пустаястрока(ТекстЗапроса) Тогда

		Попытка
			Запрос = Новый Запрос(ТекстЗапроса);
			ПараметрыЗапроса = Запрос.НайтиПараметры();
		Исключение
			Сообщить(ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			Возврат;
		КонецПопытки;
		
		МассивТиповСДатой = Новый Массив;
		
		Для каждого ПараметрЗапроса Из ПараметрыЗапроса Цикл
			
			ИмяПараметра =  ПараметрЗапроса.Имя;
			Значение = Неопределено;
			
			Отбор = Новый Структура("Название, ИД", ИмяПараметра, ИД);
			СтрокаПараметра = пТабПараметров.НайтиСтроки(Отбор);
			Если СтрокаПараметра.Количество() = 0 Тогда
				СтрокаПараметра = пТабПараметров.Добавить();
				СтрокаПараметра.Название = ИмяПараметра;
				СтрокаПараметра.ИД       = ИД;
				СтрокаПараметра.Значение = ПараметрЗапроса.ТипЗначения.ПривестиЗначение(Значение);
				
				ОписаниеОграничения = Новый  Структура("ОписаниеТипа, СписокЗначений, Текст", ПараметрЗапроса.ТипЗначения, Ложь, "");
				СтрокаПараметра.ОграничениеТипов = ОписаниеОграничения;
			Иначе
				СтрокаПараметра = СтрокаПараметра[0];
				Если ТипЗнч(СтрокаПараметра.Значение) = Тип("СписокЗначений") Тогда
					ПривестиЗначениеКТипу(СтрокаПараметра.Значение, Новый Структура("СписокЗначений,ОписаниеТипа", Истина, ПараметрЗапроса.ТипЗначения), СтрокаПараметра.Значение)
			//////////	// ++ 08.09.2015 Доработка от tristarr1
			//////////	ИначеЕсли СтрокаПараметра.Вычисляемый Тогда
			//////////	// -- 08.09.2015 Доработка от tristarr1
				ИначеЕсли ПараметрЗапроса.ТипЗначения = Новый ОписаниеТипов("Дата") И ТипЗнч(СтрокаПараметра.Значение) = Тип("Граница") Тогда
			//////////		СтрокаПараметра.ОграничениеТипов.ОписаниеТипа = "Граница";
					СтрокаПараметра.Используется = Истина;
					Продолжить;
				ИначеЕсли ПараметрЗапроса.ТипЗначения = Новый ОписаниеТипов("Дата") И ТипЗнч(СтрокаПараметра.Значение) = Тип("МоментВремени") Тогда
			//////////		СтрокаПараметра.ОграничениеТипов.ОписаниеТипа = Новый ОписаниеТипов("МоментВремени");
					СтрокаПараметра.Используется = Истина;
					Продолжить;
				ИначеЕсли СтрокаПараметра.ОграничениеТипов.ОписаниеТипа = "Граница" Тогда
					СтрокаПараметра.Используется = Истина;
					Продолжить;
				ИначеЕсли СтрокаПараметра.ОграничениеТипов.ОписаниеТипа = "ТаблицаЗначений" Тогда
			//////////		//
			//////////		ОписаниеТипаТЗ = Новый ОписаниеТипов("ТаблицаЗначений");
			//////////		СтрокаПараметра.Значение = ОписаниеТипаТЗ.ПривестиЗначение(СтрокаПараметра.Значение);
					СтрокаПараметра.Используется = Истина;
					Продолжить;
				ИначеЕсли СтрокаПараметра.ОграничениеТипов.ОписаниеТипа = Новый ОписаниеТипов("Неопределено") Тогда
			//////////		СтрокаПараметра.Значение = Неопределено;
					СтрокаПараметра.Используется = Истина;
					Продолжить;
				ИначеЕсли СтрокаПараметра.ОграничениеТипов.ОписаниеТипа = Новый ОписаниеТипов("NULL") Тогда
			//////////		СтрокаПараметра.Значение = Null;
					СтрокаПараметра.Используется = Истина;
					Продолжить;
				ИначеЕсли СтрокаПараметра.ОграничениеТипов.ОписаниеТипа = Новый ОписаниеТипов("УникальныйИдентификатор") Тогда
					СтрокаПараметра.Используется = Истина;
					Продолжить;
				ИначеЕсли СтрокаПараметра.ОграничениеТипов.ОписаниеТипа = Новый ОписаниеТипов("МоментВремени") Тогда
					//СтрокаПараметра.ОграничениеТипов.ОписаниеТипа.ПривестиЗначение(СтрокаПараметра.Значение);
					СтрокаПараметра.Используется = Истина;
					Продолжить;
			//////////	Иначе	
			//////////		СтрокаПараметра.Значение = ПараметрЗапроса.ТипЗначения.ПривестиЗначение(СтрокаПараметра.Значение);
				КонецЕсли; 
			КонецЕсли;
			
			Если ТипЗнч(СтрокаПараметра.Значение) = Тип("СписокЗначений") Тогда
				ОписаниеОграничения = Новый  Структура("ОписаниеТипа, СписокЗначений", ПараметрЗапроса.ТипЗначения, Истина)
				
			//////////	// SG, вставка 16/09/15 >>>
			//////////	// Дату нужно привести к ДатаВремя. 
			//////////ИначеЕсли	ТипЗнч(СтрокаПараметра.Значение) = Тип("Дата")
			//////////		И	ПараметрЗапроса.ТипЗначения = Новый ОписаниеТипов("Дата",,,,, Новый КвалификаторыДаты(ЧастиДаты.Дата)) Тогда
			//////////	ОграничениеТипыДатаВремя = Новый ОписаниеТипов("Дата",,,,, Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя));
			//////////	ОписаниеОграничения = Новый  Структура("ОписаниеТипа, СписокЗначений", ОграничениеТипыДатаВремя, Ложь)
			//////////	// SG, вставка 16/09/15 <<<
				
			//Иначе	
			//	ОписаниеОграничения = Новый  Структура("ОписаниеТипа, СписокЗначений", ПараметрЗапроса.ТипЗначения, Ложь)
			КонецЕсли;
			
			//СтрокаПараметра.ОграничениеТипов = ОписаниеОграничения;
			СтрокаПараметра.Используется = Истина;
			
		КонецЦикла;
		
		пХранилище.Вставить("ТабПараметров", пТабПараметров);
		
	КонецЕсли;
	
	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	
	// перезаполнение таблицы ВТ
	РазобранныйЗапрос = СоздатьТаблицуВТ(ТекстЗапроса);
	ТаблицаПакетов = пХранилище.ТаблицаПакетов;
	
	ОтборИД = Новый Структура("ИД", ИД);
	пТаблицаПакетов = ТаблицаПакетов.НайтиСтроки(ОтборИД);
	ИсходныеСтроки = ТаблицаПакетов.Скопировать(пТаблицаПакетов);
	
	Для каждого Строка Из пТаблицаПакетов Цикл
		ТаблицаПакетов.Удалить(Строка);
	КонецЦикла; 

	Для каждого Строка Из РазобранныйЗапрос Цикл
	
		НовСтрока = ТаблицаПакетов.Добавить();
		НовСтрока.ИмяПакета   = Строка.ИмяПакета;
		НовСтрока.ИД          = ИД;
		НовСтрока.ЭтоВТ       = Строка.ЭтоВТ;
		НовСтрока.ТекстПакета = Строка.ТекстПакета;
		НовСтрока.Показать    = НЕ Строка.ЭтоВТ;
		
		ОтборПоСтроке = Новый Структура("ИД,ИмяПакета", ИД, Строка.ИмяПакета);
		НайденаяСтрока = ИсходныеСтроки.НайтиСтроки(ОтборПоСтроке);
		
		Если НЕ НайденаяСтрока.Количество() = 0 Тогда
			ЗаполнитьЗначенияСвойств(НовСтрока, НайденаяСтрока[0], "Адрес,Выгрузить,Показать,ТекстМодуля");
		КонецЕсли;

	КонецЦикла;
	
    ИсходныеСтроки = Неопределено;
	
    пХранилище.Вставить("ТаблицаПакетов", ТаблицаПакетов);
	
	Если СтруктураДанных = Неопределено Тогда
		ЭтотОбъект.ПутьКХранилищу = ПоместитьВоВременноеХранилище(пХранилище, пХранилище.УникальныйИдентификаторФормы);
	КонецЕсли;
	
КонецПроцедуры

Функция ПараметрыДляОтображенияЯчейки(Значение, Хранилище)
	
	Ячейка = Новый Структура("Значение,Текст,ЦветТекста,Ширина", Значение, Значение, WebЦвета.Черный, 0);
	
	Если ТипЗнч(Ячейка.Значение) = Тип("Булево") Тогда	
		Ячейка.ЦветТекста = ?(Ячейка.Значение,WebЦвета.ТемноЗолотистый,WebЦвета.ТемноГрифельноСерый);
	ИначеЕсли Ячейка.Значение = 0 Тогда
		Ячейка.Текст = "<0>";
		Ячейка.ЦветТекста = WebЦвета.Серый;
		Ячейка.Ширина = СтрДлина(Ячейка.Текст);
	ИначеЕсли Ячейка.Значение = NULL Тогда
		Ячейка.Текст = "<NULL>";
		Ячейка.ЦветТекста = WebЦвета.Серый;
		Ячейка.Ширина = СтрДлина(Ячейка.Текст);
	ИначеЕсли Ячейка.Значение = Неопределено Тогда	
		Ячейка.Текст = "<Неопределено>";
		Ячейка.ЦветТекста = WebЦвета.Серый;
		Ячейка.Ширина = СтрДлина(Ячейка.Текст);
	ИначеЕсли Ячейка.Значение = "" Тогда	
		Ячейка.Текст = "<Пустая строка>";
		Ячейка.ЦветТекста = WebЦвета.Серый;
		Ячейка.Ширина = СтрДлина(Ячейка.Текст);
	ИначеЕсли ТипЗнч(Ячейка.Значение) = Тип("МоментВремени") Тогда	
		Ячейка.Текст = "<МоментВремени>";
		Ячейка.ЦветТекста = WebЦвета.Серый;
		Ячейка.Ширина = СтрДлина(Ячейка.Текст);
	ИначеЕсли ТипЗнч(Ячейка.Значение) = Тип("РезультатЗапроса") Тогда	
		Ячейка.Текст = "<РезультатЗапроса>";
		Ключ = "РезультатЗапроса_" + Формат(Хранилище.СтруктураРезультатовЗапросов.Количество() + 1, "ЧГ=0");
		Ячейка.Значение = Ключ;
		Хранилище.СтруктураРезультатовЗапросов.Вставить(Ключ, Значение);
		Ячейка.ЦветТекста = WebЦвета.Серый;
		Ячейка.Ширина = СтрДлина(Ячейка.Текст);
	ИначеЕсли  Справочники.ТипВсеСсылки().СодержитТип(ТипЗнч(Ячейка.Значение)) 
		ИЛИ Документы.ТипВсеСсылки().СодержитТип(ТипЗнч(Ячейка.Значение)) 
		ИЛИ ПланыСчетов.ТипВсеСсылки().СодержитТип(ТипЗнч(Ячейка.Значение)) 
		ИЛИ ПланыВидовХарактеристик.ТипВсеСсылки().СодержитТип(ТипЗнч(Ячейка.Значение))
		ИЛИ ПланыВидовРасчета.ТипВсеСсылки().СодержитТип(ТипЗнч(Ячейка.Значение))
		ИЛИ Перечисления.ТипВсеСсылки().СодержитТип(ТипЗнч(Ячейка.Значение))
		Тогда
		Если Ячейка.Значение.Пустая() Тогда
			Если  Справочники.ТипВсеСсылки().СодержитТип(ТипЗнч(Ячейка.Значение)) Тогда
				пТип = "Справочник.";
			ИначеЕсли Документы.ТипВсеСсылки().СодержитТип(ТипЗнч(Ячейка.Значение)) Тогда
				пТип = "Документ.";
			ИначеЕсли ПланыСчетов.ТипВсеСсылки().СодержитТип(ТипЗнч(Ячейка.Значение)) Тогда
				пТип = "ПланСчетов.";
			ИначеЕсли ПланыВидовХарактеристик.ТипВсеСсылки().СодержитТип(ТипЗнч(Ячейка.Значение)) Тогда
				пТип = "ПланВидовХарактеристик.";
			ИначеЕсли ПланыВидовРасчета.ТипВсеСсылки().СодержитТип(ТипЗнч(Ячейка.Значение)) Тогда
				пТип = "ПланВидовРасчета";
			ИначеЕсли Перечисления.ТипВсеСсылки().СодержитТип(ТипЗнч(Ячейка.Значение)) Тогда
				пТип = "Перечисление.";
			КонецЕсли;
			Ячейка.Текст = "<Пустая ссылка: " + пТип + ТипЗнч(Ячейка.Значение) + ">";
			Ячейка.ЦветТекста = WebЦвета.Серый;
			Ячейка.Ширина = СтрДлина(Ячейка.Текст);
		ИначеЕсли Перечисления.ТипВсеСсылки().СодержитТип(ТипЗнч(Ячейка.Значение)) Тогда	
			Ячейка.ЦветТекста = WebЦвета.ТемноБордовый;
			// определим по типу
		ИначеЕсли Документы.ТипВсеСсылки().СодержитТип(ТипЗнч(Ячейка.Значение))  Тогда	
			Ячейка.ЦветТекста = WebЦвета.КожаноКоричневый;
			// определим по типу
		ИначеЕсли  Справочники.ТипВсеСсылки().СодержитТип(ТипЗнч(Ячейка.Значение)) Тогда	
			Если Ячейка.Значение.Предопределенный Тогда
				Ячейка.ЦветТекста = WebЦвета.ТемноБордовый;
			КонецЕсли;		
			Ячейка.Ширина = СтрДлина(Ячейка.Значение.Наименование);
		ИначеЕсли  ПланыВидовХарактеристик.ТипВсеСсылки().СодержитТип(ТипЗнч(Ячейка.Значение)) Тогда	
			Если Ячейка.Значение.Предопределенный Тогда
				Ячейка.ЦветТекста = WebЦвета.ТемноБордовый;
			Иначе 
				Ячейка.ЦветТекста = WebЦвета.Томатный;
			КонецЕсли;		
			Ячейка.Ширина = СтрДлина(Ячейка.Значение.Наименование);
		ИначеЕсли  ПланыВидовРасчета.ТипВсеСсылки().СодержитТип(ТипЗнч(Ячейка.Значение)) Тогда	
			Если Ячейка.Значение.Предопределенный Тогда
				Ячейка.ЦветТекста = WebЦвета.ТемноБордовый;
			Иначе 
				Ячейка.ЦветТекста = WebЦвета.Томатный;
			КонецЕсли;		
			Ячейка.Ширина = СтрДлина(Ячейка.Значение.Наименование);
		ИначеЕсли  ПланыСчетов.ТипВсеСсылки().СодержитТип(ТипЗнч(Ячейка.Значение)) Тогда	
			Если Ячейка.Значение.Предопределенный Тогда
				Ячейка.ЦветТекста = WebЦвета.ТемноБордовый;
			Иначе 
				Ячейка.ЦветТекста = WebЦвета.Томатный;
			КонецЕсли;		
			Ячейка.Ширина = СтрДлина(Строка(Ячейка.Значение));
		КонецЕсли;
	ИначеЕсли ТипЗнч(Ячейка.Значение) = Тип("Строка") Тогда	
		Ячейка.ЦветТекста = WebЦвета.ТемноЗеленый;
		Ячейка.Ширина = СтрДлина(Ячейка.Значение);
	ИначеЕсли Ячейка.Значение = Дата(1,1,1) Тогда
		Ячейка.Текст = "<Пустая дата>";
		Ячейка.ЦветТекста = WebЦвета.Серый;
		Ячейка.Ширина = СтрДлина(Ячейка.Текст);
	ИначеЕсли ТипЗнч(Ячейка.Значение) = Тип("Дата") Тогда	
		Ячейка.ЦветТекста = WebЦвета.ТемноСиний;
		Ячейка.Ширина = СтрДлина("00.00.0000 00:00:00");
	ИначеЕсли ТипЗнч(Ячейка.Значение) = Тип("Число") Тогда	
		Ячейка.ЦветТекста = WebЦвета.ФуксинТемный;
		Ячейка.Ширина = СтрДлина(Ячейка.Текст);
	КонецЕсли;
	
	Возврат Ячейка;
	
КонецФункции

Процедура ПривестиЗначениеКТипу(ИсходноеЗначение, ОписаниеВыбранныхТипов, НовоеЗначение) 
	
	ИсходныйТипСписокЗначений = ТипЗнч(ИсходноеЗначение) = Тип("СписокЗначений");
	ИсходныйТип = ?(ИсходныйТипСписокЗначений, ИсходноеЗначение.ТипЗначения, ТипЗнч(ИсходноеЗначение));
	
	ПривестиКСпискуЗначений = ОписаниеВыбранныхТипов.СписокЗначений;
	НовыйТип = ОписаниеВыбранныхТипов.ОписаниеТипа;
	
	ЭлементыИсходногоЗначения = Новый Массив;
	Если ИсходныйТипСписокЗначений Тогда
		Для каждого Эл Из ИсходноеЗначение Цикл
			ЭлементыИсходногоЗначения.Добавить(Эл.Значение);
		КонецЦикла;
	Иначе
		ЭлементыИсходногоЗначения.Добавить(ИсходноеЗначение);
	КонецЕсли;
	
	Если ПривестиКСпискуЗначений Тогда
		НовоеЗначение = Новый СписокЗначений;
		НовоеЗначение.ТипЗначения = НовыйТип;
		Для каждого ЭлИсхЗнач Из ЭлементыИсходногоЗначения Цикл
			Если НовыйТип.СодержитТип(ТипЗнч(ЭлИсхЗнач)) Тогда
				НовоеЗначение.Добавить(ЭлИсхЗнач);
			КонецЕсли; 
		КонецЦикла; 
	Иначе
		Для каждого ЭлИсхЗнач Из ЭлементыИсходногоЗначения Цикл
			Если НовыйТип.СодержитТип(ТипЗнч(ЭлИсхЗнач)) Тогда
				НовоеЗначение = ЭлИсхЗнач;
				Прервать;
			КонецЕсли; 
		КонецЦикла; 
	КонецЕсли;

КонецПроцедуры // ПривестиЗначениеКТипу()

Процедура ОчиститьТекстЗапросаОтКомментариев(ИсходныйТекст) Экспорт

	Если ПустаяСтрока(ИсходныйТекст) Тогда
		ИсходныйТекст = "";
		Возврат;
	КонецЕсли;

	ТекстовыйДокумент = Новый ТекстовыйДокумент;
	ТекстовыйДокумент2 = Новый ТекстовыйДокумент;
	ТекстовыйДокумент.УстановитьТекст(ИсходныйТекст);
	КоличествоСтрок = ТекстовыйДокумент.КоличествоСтрок();

	Для i = 1 По КоличествоСтрок Цикл
		ТекущаяСтрока = ТекстовыйДокумент.ПолучитьСтроку(i);
		НоваяСтрока = "";
		ЭтоТекст = Ложь;
		СимволовВСтроке = СтрДлина(ТекущаяСтрока);
		Для r = 1 По СимволовВСтроке Цикл
			ТекСимвол = Сред(ТекущаяСтрока, r, 1);
			Если ТекСимвол = """" Тогда
				ЭтоТекст = НЕ ЭтоТекст;
			КонецЕсли;
			Если НЕ ЭтоТекст И ТекСимвол = "/" И ?(r < СимволовВСтроке, Истина, Ложь) И Сред(ТекущаяСтрока, r + 1, 1) = "/" Тогда
				Прервать;
			КонецЕсли;
			НоваяСтрока = НоваяСтрока + ТекСимвол;
		КонецЦикла;
		ТекстовыйДокумент2.ДобавитьСтроку(НоваяСтрока);
	КонецЦикла;
	
	ИсходныйТекст = ТекстовыйДокумент2.ПолучитьТекст();

КонецПроцедуры

Функция ОчиститьТекстЗапроса(ТекстЗапроса) Экспорт
	Перем Ответ, флЭтоКомментарий, флЭтоСтрока, БукваСледующая, сч, дл, Буква;
	Ответ = "";
	флЭтоКомментарий = Ложь;
	флЭтоСтрока =Ложь;
	флЭтоДляПостроителя = Ложь;
	БукваСледующая = Лев(ТекстЗапроса, 1);
	сч = 1;
	дл = СтрДлина(ТекстЗапроса);
	Пока сч<=дл Цикл
		сч = сч + 1;
		Буква = БукваСледующая;
		БукваСледующая = Сред(ТекстЗапроса, сч, 1);
		Если Буква="""" и БукваСледующая="""" и флЭтоСтрока и (НЕ флЭтоКомментарий) Тогда
			сч = сч + 1;
			Буква = БукваСледующая;
			БукваСледующая = Сред(ТекстЗапроса, сч, 1);
			Продолжить;
		ИначеЕсли Буква="""" и (БукваСледующая<>"""" или (НЕ флЭтоСтрока)) и (НЕ флЭтоКомментарий) Тогда
			флЭтоСтрока = НЕ флЭтоСтрока;
			Ответ = Ответ + """";
			Продолжить;
		ИначеЕсли Буква="/" и БукваСледующая="/" и (НЕ флЭтоСтрока) Тогда
			флЭтоКомментарий = Истина;
			Продолжить;
		ИначеЕсли Буква=Символы.ПС и флЭтоКомментарий Тогда
			флЭтоКомментарий = Ложь;
		ИначеЕсли Буква="{" и (НЕ флЭтоСтрока) и (НЕ флЭтоКомментарий) Тогда
			флЭтоДляПостроителя = Истина;
		ИначеЕсли Буква="}" и (НЕ флЭтоСтрока) и (НЕ флЭтоКомментарий) Тогда
			флЭтоДляПостроителя = Ложь;
		КонецЕсли;
		Если НЕ (флЭтоСтрока или флЭтоКомментарий или флЭтоДляПостроителя) Тогда
			Ответ = Ответ + Буква;
		КонецЕсли;
	КонецЦикла;
	Возврат Ответ;
КонецФункции

Функция СоздатьСтруктуру(ДобавитьДерево = Ложь) Экспорт
	
	СтруктураХранилища = Новый Структура;
	
	ТабПараметров = Новый ТаблицаЗначений;
	Колонки = ТабПараметров.Колонки;
	Колонки.Добавить("ИД"                  , Новый ОписаниеТипов("Строка"));
	Колонки.Добавить("Название"            , Новый ОписаниеТипов("Строка"));
	Колонки.Добавить("Значение");
	Колонки.Добавить("ОграничениеТипов");
	Колонки.Добавить("Используется"        , Новый ОписаниеТипов("Булево"));
	// ++ 08.09.2015 Доработка от tristarr1
	Колонки.Добавить("Вычисляемый"    , Новый ОписаниеТипов("Булево"));
	// -- 08.09.2015 Доработка от tristarr1
	
	ТаблицаПакетов = Новый ТаблицаЗначений;
	Колонки = ТаблицаПакетов.Колонки;
	Колонки.Добавить("ИмяПакета"      , Новый ОписаниеТипов("Строка"));
	Колонки.Добавить("ИД"             , Новый ОписаниеТипов("Строка"));
	Колонки.Добавить("Адрес"          , Новый ОписаниеТипов("Строка"));
	Колонки.Добавить("Выгрузить"      , Новый ОписаниеТипов("Булево"));
	Колонки.Добавить("Показать"       , Новый ОписаниеТипов("Булево"));
	Колонки.Добавить("ЭтоВТ"          , Новый ОписаниеТипов("Булево"));
	Колонки.Добавить("ТекстПакета"    , Новый ОписаниеТипов("Строка"));
	Колонки.Добавить("ВремяВыполнения", Новый ОписаниеТипов("Число"));
	Колонки.Добавить("ТекстМодуля"    , Новый ОписаниеТипов("Строка"));
	Колонки.Добавить("КоличествоСтрок", Новый ОписаниеТипов("Число"));
	
	Если ДобавитьДерево Тогда
	
		ДеревоЗапросов = Новый ДеревоЗначений;
		Колонки = ДеревоЗапросов.Колонки;
		Колонки.Добавить("Наименование"                , Новый ОписаниеТипов("Строка"));
		Колонки.Добавить("ИД"                          , Новый ОписаниеТипов("Строка"));
		Колонки.Добавить("Текст");
		Колонки.Добавить("АвтоДобавлениеПредставлений");
		Колонки.Добавить("ИДКартинки");
		Колонки.Добавить("ВыполнитьВГруппе");
		
		НоваяСтрокаДЗ = ДеревоЗапросов.Строки.Добавить();
		ИДСтроки = "00000000000000";
		
		НоваяСтрокаДЗ.ИД = ИДСтроки;
		НоваяСтрокаДЗ.Наименование = "Ветка запросов";
		
		СтруктураХранилища.Вставить("ДеревоЗапросов", ДеревоЗапросов);
	
	КонецЕсли;
	
	СтруктураХранилища.Вставить("ТабПараметров"               , ТабПараметров);
	СтруктураХранилища.Вставить("ТаблицаПакетов"              , ТаблицаПакетов);
	СтруктураХранилища.Вставить("ОписаниеТекущейВеткиДЗ"      , Новый Структура);
	СтруктураХранилища.Вставить("Результат"                   , Новый ТаблицаЗначений);
	СтруктураХранилища.Вставить("СтруктураТЗ"                 , Новый Структура);
	
	СтруктураХранилища.Вставить("СтруктураРезультатовЗапросов", Новый Структура);
	СтруктураХранилища.Вставить("СтруктурыРезультатовЗапросовТабДоков", Новый Структура);
	//СтруктураХранилища.Вставить("ПутьКФайлуЗапроса"           , "");
	
	Возврат СтруктураХранилища;

КонецФункции

Функция ОбработатьВнешнийЗапрос(Знач Запрос = Неопределено, ИмяФайла = "РезультатыЗапроса") Экспорт
	
	Если Запрос.МенеджерВременныхТаблиц = Неопределено Тогда
		Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	КонецЕсли;
	
	// SG, правка 16/09/15 >>>
	// У меня почему-то ошибка. Оно то понятно почему. Нет такого реквизита.
	// Обработка.КонсольЗапросовУФ.МодульОбъекта Возможно ошибочное свойство: "ИспользуемоеИмяФайла"
	ФайлОбработки = Новый Файл("");
	// original
	#Область Исправлено
	//ФайлОбработки = Новый Файл(ЭтотОбъект.ИспользуемоеИмяФайла);
	#КонецОбласти
	// SG, правка 16/09/15 <<<
	
	ПутьКФайлуРезультата = ФайлОбработки.Путь + ИмяФайла + ".txt";
	ФайлРезультата = Новый Файл(ПутьКФайлуРезультата);
	
	Если ФайлРезультата.Существует() Тогда
		СтруктураДанных = ЗначениеИзФайла(ПутьКФайлуРезультата);
	Иначе
		СтруктураДанных = СоздатьСтруктуру(Истина);
		СтруктураДанных.Вставить("ВнешнийРезультат", Новый ТабличныйДокумент);
	КонецЕсли;

	ВеткаЗапроса = СтруктураДанных.ДеревоЗапросов.Строки[0].Строки.Добавить();
	НомерСтрокиСтрокой = Формат(СтруктураДанных.ДеревоЗапросов.Строки[0].Строки.Количество(), "ЧГ=0");
	ИД = Лев("00000000000000", 14 - СтрДлина(НомерСтрокиСтрокой)) + НомерСтрокиСтрокой;
	ВеткаЗапроса.ИД = ИД;
	ВеткаЗапроса.Наименование = "Вызов №" + НомерСтрокиСтрокой;
	ВеткаЗапроса.Текст = Запрос.Текст;
	ВеткаЗапроса.ВыполнитьВГруппе = Истина;
	пТабПараметров = СтруктураДанных.ТабПараметров;
	
	Для каждого ПараметрЗапроса Из Запрос.Параметры Цикл
		
		ИмяПараметра =  ПараметрЗапроса.Ключ;
		Значение = ПараметрЗапроса.Значение;

		СтрокаПараметра = пТабПараметров.Добавить();
		СтрокаПараметра.Название = ИмяПараметра;
		СтрокаПараметра.ИД       = ИД;
		
		Если ТипЗнч(Значение) = Тип("СписокЗначений") Тогда
			СтрокаПараметра.ОграничениеТипов = Новый Структура("ОписаниеТипа,СписокЗначений", Значение.ТипЗначения, Истина);
		ИначеЕсли ТипЗнч(Значение) = Тип("Массив") Тогда
			СпЗнч = Новый СписокЗначений;
			МассивТипов = Новый Массив;
			Для каждого Эл Из Значение Цикл
				 МассивТипов.Добавить(ТипЗнч(Эл));
			КонецЦикла; 
			НовОписТипов = Новый ОписаниеТипов(МассивТипов);
			СпЗнч.ЗагрузитьЗначения(Значение);
			Значение = СпЗнч;
			СтрокаПараметра.ОграничениеТипов = Новый Структура("ОписаниеТипа,СписокЗначений", НовОписТипов, Истина);
		Иначе
			МассивТипов = Новый Массив;
			МассивТипов.Добавить(ТипЗнч(Значение));

			СтрокаПараметра.ОграничениеТипов = Новый Структура("ОписаниеТипа,СписокЗначений", Новый ОписаниеТипов(МассивТипов), Ложь);
		КонецЕсли; 

		СтрокаПараметра.Значение = Значение;

		СтрокаПараметра.Используется = Истина;
		
	КонецЦикла;
	
	РазобранныйЗапрос = СоздатьТаблицуВТ(Запрос.Текст);
	ТаблицаПакетов = СтруктураДанных.ТаблицаПакетов;
	
	Для каждого Строка Из РазобранныйЗапрос Цикл
	
		НовСтрока = ТаблицаПакетов.Добавить();
		НовСтрока.ИмяПакета   = Строка.ИмяПакета;
		НовСтрока.ИД          = ИД;
		НовСтрока.ЭтоВТ       = Строка.ЭтоВТ;
		НовСтрока.ТекстПакета = Строка.ТекстПакета;
		НовСтрока.Показать    = НЕ Строка.ЭтоВТ;

	КонецЦикла;

	ЗначениеВФайл(ПутьКФайлуРезультата, СтруктураДанных);

КонецФункции

Функция ИзменитьЯзыкЗапроса(Знач ИсходныйТекст, СохранитьКомментарии = Истина, РусскийЯзык = Истина) Экспорт

	Если ПустаяСтрока(ИсходныйТекст) Тогда
		Возврат "";
	КонецЕсли;

	ТекстовыйДокумент = Новый ТекстовыйДокумент;
	ТекстовыйДокумент2 = Новый ТекстовыйДокумент;
	ТекстовыйДокумент.УстановитьТекст(ИсходныйТекст);
	КоличествоСтрок = ТекстовыйДокумент.КоличествоСтрок();
    СимволыРазделители = " " + Символы.ПС + Символы.Таб + "+-*/()={}";
	
	ТекущийУровеньВложенности = 0; 
	ДанныеТекущихУровнейВложенности = Новый ТаблицаЗначений;
	ДанныеТекущихУровнейВложенности.Колонки.Добавить("Секция");
	ДанныеТекущихУровнейВложенности.Колонки.Добавить("Предложение");
	НоваяСтрока = ДанныеТекущихУровнейВложенности.Добавить();
	НоваяСтрока.Секция = "";
	НоваяСтрока.Предложение = "";
	ТекущаяСекция = ДанныеТекущихУровнейВложенности[ТекущийУровеньВложенности].Секция;
	ТекущееПредложение = ДанныеТекущихУровнейВложенности[ТекущийУровеньВложенности].Предложение;
	ОднословныйСловарь = СоздатьОднословныйСловарь();

	Для i = 1 По КоличествоСтрок Цикл
		ТекущаяСтрока = ТекстовыйДокумент.ПолучитьСтроку(i);
		НоваяСтрока = "";
		ЭтоТекст = Ложь;
		СимволовВСтроке = СтрДлина(ТекущаяСтрока);
		Для r = 1 По СимволовВСтроке Цикл
			ТекСимвол = Сред(ТекущаяСтрока, r, 1);
			Если ТекСимвол = """" Тогда
				ЭтоТекст = НЕ ЭтоТекст;
			КонецЕсли;
			Если НЕ ЭтоТекст И ТекСимвол = "/" И ?(r < СимволовВСтроке, Истина, Ложь) И Сред(ТекущаяСтрока, r + 1, 1) = "/" Тогда
				Если СохранитьКомментарии Тогда
					НоваяСтрока = НоваяСтрока + Сред(ТекущаяСтрока, r);
				КонецЕсли;
				Прервать;
			ИначеЕсли ЭтоТекст ИЛИ (НЕ ЭтоТекст И ТекСимвол = """") Тогда
				НоваяСтрока = НоваяСтрока + ТекСимвол;
			ИначеЕсли Найти(СимволыРазделители, ТекСимвол) > 0 Тогда
				НоваяСтрока = НоваяСтрока + ТекСимвол;
				Если ТекСимвол = "(" Тогда
					ТекущийУровеньВложенности = ТекущийУровеньВложенности + 1;
					ДанныеТекущихУровнейВложенности.Добавить();
				ИначеЕсли ТекСимвол = ")" Тогда
					ДанныеТекущихУровнейВложенности.Удалить(ДанныеТекущихУровнейВложенности[ТекущийУровеньВложенности]);
					ТекущийУровеньВложенности = ТекущийУровеньВложенности - 1;
				КонецЕсли;
			Иначе
				ТекСлово = ТекСимвол;
				Пока r < СимволовВСтроке Цикл
				    r = r + 1;
					ТекСимвол = Сред(ТекущаяСтрока, r, 1);
					Если Найти(СимволыРазделители, ТекСимвол) = 0 Тогда
						ТекСлово = ТекСлово + ТекСимвол;
					Иначе
						r = r - 1;
						Прервать;
					КонецЕсли;
				КонецЦикла;
				Если ОпределитьТекущуюСекциюПредложение(ТекСлово, ТекущаяСекция, ТекущееПредложение) Тогда
					ДанныеТекущихУровнейВложенности[ТекущийУровеньВложенности].Секция = ТекущаяСекция;
					ДанныеТекущихУровнейВложенности[ТекущийУровеньВложенности].Предложение = ТекущееПредложение;
				КонецЕсли;
				Если РусскийЯзык Тогда
					СтруктураПоиска = Новый Структура("Английский", ТекСлово);
					ТребуемыйЯзык = "Русский";
				ИначеЕсли НЕ РусскийЯзык Тогда
					СтруктураПоиска = Новый Структура("Русский", ТекСлово);
					ТребуемыйЯзык = "Английский";
				КонецЕсли;
				НайденныеСтроки = ОднословныйСловарь.НайтиСтроки(СтруктураПоиска);
				Если НайденныеСтроки.Количество() = 1 Тогда
					ТекСлово = НайденныеСтроки[0][ТребуемыйЯзык];
				ИначеЕсли НайденныеСтроки.Количество() > 1 Тогда
					СтруктураПоиска.Вставить("Секция"     , ДанныеТекущихУровнейВложенности[ТекущийУровеньВложенности].Секция);
					СтруктураПоиска.Вставить("Предложение", ДанныеТекущихУровнейВложенности[ТекущийУровеньВложенности].Предложение);
					НайденнаяСтрока = ОднословныйСловарь.НайтиСтроки(СтруктураПоиска);
					Если НайденнаяСтрока.Количество() = 1 Тогда
						ТекСлово = НайденнаяСтрока[0][ТребуемыйЯзык];
					КонецЕсли;
				КонецЕсли;
				НоваяСтрока = НоваяСтрока + ТекСлово;
			КонецЕсли;
		КонецЦикла;
		ТекстовыйДокумент2.ДобавитьСтроку(НоваяСтрока);
	КонецЦикла;

	Возврат ТекстовыйДокумент2.ПолучитьТекст();
	
КонецФункции // ИзменитьЯзыкЗапроса()

Функция ОпределитьТекущуюСекциюПредложение(ТекСлово, ТекущаяСекция, ТекущееПредложение) Экспорт

	Если ВРег(ТекСлово) = "ВЫБРАТЬ" ИЛИ ВРег(ТекСлово) = "SELECT" Тогда
		ТекущаяСекция      = "ВЫБРАТЬ";
		ТекущееПредложение = "ВЫБРАТЬ";
		Возврат Истина;
	ИначеЕсли ВРег(ТекСлово) = "УНИЧТОЖИТЬ" ИЛИ ВРег(ТекСлово) = "DROP" Тогда
		ТекущаяСекция      = "УНИЧТОЖИТЬ";
		ТекущееПредложение = "";
		Возврат Истина;
	ИначеЕсли ВРег(ТекСлово) = "ОБЪЕДИНИТЬ" ИЛИ ВРег(ТекСлово) = "UNION" Тогда
		ТекущаяСекция      = "ОБЪЕДИНИТЬ";
		ТекущееПредложение = "";
		Возврат Истина;
	ИначеЕсли ВРег(ТекСлово) = "ПОМЕСТИТЬ" ИЛИ ВРег(ТекСлово) = "INTO" Тогда
		ТекущаяСекция      = "ВЫБРАТЬ";
		ТекущееПредложение = "ПОМЕСТИТЬ";
		Возврат Истина;
	ИначеЕсли ВРег(ТекСлово) = "ИЗ" ИЛИ ВРег(ТекСлово) = "FROM" Тогда
		ТекущаяСекция      = "ВЫБРАТЬ";
		ТекущееПредложение = "ИЗ";
		Возврат Истина;
	ИначеЕсли ВРег(ТекСлово) = "ИНДЕКСИРОВАТЬ" ИЛИ ВРег(ТекСлово) = "INDEX" Тогда
		ТекущаяСекция      = "ВЫБРАТЬ";
		ТекущееПредложение = "ИНДЕКСИРОВАТЬ ПО";
		Возврат Истина;
	ИначеЕсли ВРег(ТекСлово) = "ГДЕ" ИЛИ ВРег(ТекСлово) = "WHERE" Тогда
		ТекущаяСекция      = "ВЫБРАТЬ";
		ТекущееПредложение = "ГДЕ";
		Возврат Истина;
	ИначеЕсли ВРег(ТекСлово) = "СГРУППИРОВАТЬ" ИЛИ ВРег(ТекСлово) = "GROUP" Тогда
		ТекущаяСекция      = "ВЫБРАТЬ";
		ТекущееПредложение = "СГРУППИРОВАТЬ ПО";
		Возврат Истина;
	ИначеЕсли ВРег(ТекСлово) = "ИМЕЮЩИЕ" ИЛИ ВРег(ТекСлово) = "HAVING" Тогда
		ТекущаяСекция      = "ВЫБРАТЬ";
		ТекущееПредложение = "ИМЕЮЩИЕ";
		Возврат Истина;
	ИначеЕсли ВРег(ТекСлово) = "ДЛЯ" ИЛИ ВРег(ТекСлово) = "FOR" Тогда
		ТекущаяСекция      = "ВЫБРАТЬ";
		ТекущееПредложение = "ДЛЯ ИЗМЕНЕНИЯ";
		Возврат Истина;
	ИначеЕсли ВРег(ТекСлово) = "УПОРЯДОЧИТЬ" ИЛИ ВРег(ТекСлово) = "ORDER" Тогда
		ТекущаяСекция      = "УПОРЯДОЧИТЬ ПО";
		ТекущееПредложение = "";
		Возврат Истина;
	ИначеЕсли ВРег(ТекСлово) = "АВТОУПОРЯДОЧИВАНИЕ" ИЛИ ВРег(ТекСлово) = "AUTOORDER" Тогда
		ТекущаяСекция      = "АВТОУПОРЯДОЧИВАНИЕ";
		ТекущееПредложение = "";
		Возврат Истина;
	ИначеЕсли ВРег(ТекСлово) = "ИТОГИ" ИЛИ ВРег(ТекСлово) = "TOTALS" Тогда
		ТекущаяСекция      = "ИТОГИ";
		ТекущееПредложение = "";
		Возврат Истина;
	КонецЕсли; 
	
	Возврат Ложь;

КонецФункции

Функция СоздатьОднословныйСловарь()
	
	Словарь = Новый ТаблицаЗначений;
	
 	Словарь.Колонки.Добавить("Русский");
	Словарь.Колонки.Добавить("Английский");
	Словарь.Колонки.Добавить("Секция");
	Словарь.Колонки.Добавить("Предложение");

	ДобавитьСтрокуВСловарь(Словарь, "АВТОУПОРЯДОЧИВАНИЕ"    , "AUTOORDER", ,);
	ДобавитьСтрокуВСловарь(Словарь, "БУЛЕВО"                , "BOOLEAN", ,);
	ДобавитьСтрокуВСловарь(Словарь, "В"                     , "IN", ,);
	ДобавитьСтрокуВСловарь(Словарь, "ВНЕШНЕЕ"               , "OUTER", ,);
	ДобавитьСтрокуВСловарь(Словарь, "ВНУТРЕННЕЕ"            , "INNER", ,);
	ДобавитьСтрокуВСловарь(Словарь, "ВОЗР"                  , "ASC", ,);
	ДобавитьСтрокуВСловарь(Словарь, "ВСЕ"                   , "ALL", ,);
	ДобавитьСтрокуВСловарь(Словарь, "ВЫБОР"                 , "CASE", ,);
	ДобавитьСтрокуВСловарь(Словарь, "ВЫБРАТЬ"               , "SELECT", ,);
	ДобавитьСтрокуВСловарь(Словарь, "ВЫРАЗИТЬ"              , "CAST", ,);
	ДобавитьСтрокуВСловарь(Словарь, "ГДЕ"                   , "WHERE", ,);
	ДобавитьСтрокуВСловарь(Словарь, "ГОД"                   , "YEAR", ,);
	ДобавитьСтрокуВСловарь(Словарь, "ДАТА"                  , "DATE", ,);
	ДобавитьСтрокуВСловарь(Словарь, "ДАТАВРЕМЯ"             , "DATETIME", ,);
	ДобавитьСтрокуВСловарь(Словарь, "ДЕКАДА"                , "TENDAYS", ,);
	ДобавитьСтрокуВСловарь(Словарь, "ДЕНЬ"                  , "DAY", ,);
	ДобавитьСтрокуВСловарь(Словарь, "ДЕНЬГОДА"              , "DAYOFYEAR", ,);
	ДобавитьСтрокуВСловарь(Словарь, "ДЕНЬНЕДЕЛИ"            , "WEEKDAY", ,);
	ДобавитьСтрокуВСловарь(Словарь, "ДОБАВИТЬКДАТЕ"         , "DATEADD", ,);
	ДобавитьСтрокуВСловарь(Словарь, "ЕСТЬ"                  , "IS", ,);
	ДобавитьСтрокуВСловарь(Словарь, "ЕСТЬNULL"              , "ISNULL", ,);
	ДобавитьСтрокуВСловарь(Словарь, "ЗНАЧЕНИЕ"              , "VALUE", ,);
	ДобавитьСтрокуВСловарь(Словарь, "И"                     , "AND", ,);
	ДобавитьСтрокуВСловарь(Словарь, "ИЕРАРХИИ"              , "HIERARCHY", , "ГДЕ");
	ДобавитьСтрокуВСловарь(Словарь, "ИЕРАРХИЯ"              , "HIERARCHY", , "УПОРЯДОЧИТЬ ПО");
	ДобавитьСтрокуВСловарь(Словарь, "ИЗ"                    , "FROM", ,);
	ДобавитьСтрокуВСловарь(Словарь, "ИЛИ"                   , "OR", ,);
	ДобавитьСтрокуВСловарь(Словарь, "ИМЕЮЩИЕ"               , "HAVING", ,);
	ДобавитьСтрокуВСловарь(Словарь, "ИНАЧЕ"                 , "ELSE", ,);
	ДобавитьСтрокуВСловарь(Словарь, "ИСТИНА"                , "TRUE", ,);
	ДобавитьСтрокуВСловарь(Словарь, "КАК"                   , "AS", ,);
	ДобавитьСтрокуВСловарь(Словарь, "КВАРТАЛ"               , "QUARTER", ,);
	ДобавитьСтрокуВСловарь(Словарь, "КОГДА"                 , "WHEN", ,);
	ДобавитьСтрокуВСловарь(Словарь, "КОЛИЧЕСТВО"            , "COUNT", ,);
	ДобавитьСтрокуВСловарь(Словарь, "КОНЕЦПЕРИОДА"          , "ENDOFPERIOD", ,);
	ДобавитьСтрокуВСловарь(Словарь, "КОНЕЦ"                 , "END", ,);
	ДобавитьСтрокуВСловарь(Словарь, "ЛЕВОЕ"                 , "LEFT", ,);
	ДобавитьСтрокуВСловарь(Словарь, "ЛОЖЬ"                  , "FALSE", ,);
	ДобавитьСтрокуВСловарь(Словарь, "МАКСИМУМ"              , "MAX", ,);
	ДобавитьСтрокуВСловарь(Словарь, "МЕЖДУ"                 , "BETWEEN", ,);
	ДобавитьСтрокуВСловарь(Словарь, "МЕСЯЦ"                 , "MONTH", ,);
	ДобавитьСтрокуВСловарь(Словарь, "МИНИМУМ"               , "MIN", ,);
	ДобавитьСтрокуВСловарь(Словарь, "МИНУТА"                , "MINUTE", ,);
	ДобавитьСтрокуВСловарь(Словарь, "НАЧАЛОПЕРИОДА"         , "BEGINOFPERIOD", ,);
	ДобавитьСтрокуВСловарь(Словарь, "НЕ"                    , "NOT", ,);
	ДобавитьСтрокуВСловарь(Словарь, "НЕДЕЛЯ"                , "WEEK", ,);
	ДобавитьСтрокуВСловарь(Словарь, "НЕОПРЕДЕЛЕНО"          , "UNDEFINED", ,);
	ДобавитьСтрокуВСловарь(Словарь, "ОБЩИЕ"                 , "OVERALL", ,);
	ДобавитьСтрокуВСловарь(Словарь, "ОБЪЕДИНИТЬ"            , "UNION", ,);
	ДобавитьСтрокуВСловарь(Словарь, "ПЕРВЫЕ"                , "TOP", ,);
	ДобавитьСтрокуВСловарь(Словарь, "ПЕРИОДАМИ"             , "PERIODS", ,);
	ДобавитьСтрокуВСловарь(Словарь, "ПОДОБНО"               , "LIKE", ,);
	ДобавитьСтрокуВСловарь(Словарь, "ПОДСТРОКА"             , "SUBSTRING", ,);
	ДобавитьСтрокуВСловарь(Словарь, "ПОЛНОЕ"                , "FULL", ,);
	ДобавитьСтрокуВСловарь(Словарь, "ПОЛУГОДИЕ"             , "HALFYEAR", ,);
	ДобавитьСтрокуВСловарь(Словарь, "ПОМЕСТИТЬ"             , "INTO", ,);
	ДобавитьСтрокуВСловарь(Словарь, "ПРАВОЕ"                , "RIGHT", ,);
	ДобавитьСтрокуВСловарь(Словарь, "ПРЕДСТАВЛЕНИЕ"         , "PRESENTATION", ,);
	ДобавитьСтрокуВСловарь(Словарь, "ПРЕДСТАВЛЕНИЕССЫЛКИ"   , "REFPRESENTATION", ,);
	ДобавитьСтрокуВСловарь(Словарь, "ПУСТАЯТАБЛИЦА"         , "EMPTYTABLE", ,);
	ДобавитьСтрокуВСловарь(Словарь, "РАЗЛИЧНЫЕ"             , "DISTINCT", ,);
	ДобавитьСтрокуВСловарь(Словарь, "РАЗНОСТЬДАТ"           , "DATEDIFF", ,);
	ДобавитьСтрокуВСловарь(Словарь, "РАЗРЕШЕННЫЕ"           , "ALLOWED", ,);
	ДобавитьСтрокуВСловарь(Словарь, "СЕКУНДА"               , "SECOND", ,);
	ДобавитьСтрокуВСловарь(Словарь, "СПЕЦСИМВОЛ"            , "ESCAPE", ,);
	ДобавитьСтрокуВСловарь(Словарь, "СРЕДНЕЕ"               , "AVG", ,);
	ДобавитьСтрокуВСловарь(Словарь, "ССЫЛКА"                , "REFS", ,);
	ДобавитьСтрокуВСловарь(Словарь, "СТРОКА"                , "STRING", ,);
	ДобавитьСтрокуВСловарь(Словарь, "СУММА"                 , "SUM", ,);
	ДобавитьСтрокуВСловарь(Словарь, "ТОГДА"                 , "THEN", ,);
	ДобавитьСтрокуВСловарь(Словарь, "ТИП"                   , "TYPE", ,);
	ДобавитьСтрокуВСловарь(Словарь, "ТИПЗНАЧЕНИЯ"           , "VALUETYPE", ,);
	ДобавитьСтрокуВСловарь(Словарь, "ТОЛЬКО"                , "ONLY", ,);
	ДобавитьСтрокуВСловарь(Словарь, "УБЫВ"                  , "DESC", ,);
	ДобавитьСтрокуВСловарь(Словарь, "ЧАС"                   , "HOUR", ,);
	ДобавитьСтрокуВСловарь(Словарь, "ЧИСЛО"                 , "NUMBER", ,);
	ДобавитьСтрокуВСловарь(Словарь, "УНИЧТОЖИТЬ"            , "DROP", ,);
	
	ДобавитьСтрокуВСловарь(Словарь, "ДЛЯ"                   , "FOR", ,);
	ДобавитьСтрокуВСловарь(Словарь, "ИЗМЕНЕНИЯ"             , "UPDATE", ,);
	ДобавитьСтрокуВСловарь(Словарь, "ИНДЕКСИРОВАТЬ"         , "INDEX", ,);
	ДобавитьСтрокуВСловарь(Словарь, "СГРУППИРОВАТЬ"         , "GROUP", ,);
	ДобавитьСтрокуВСловарь(Словарь, "УПОРЯДОЧИТЬ"           , "ORDER", ,);

	ДобавитьСтрокуВСловарь(Словарь, "ИТОГИ"                 , "TOTALS", ,);
	ДобавитьСтрокуВСловарь(Словарь, "СОЕДИНЕНИЕ"            , "JOIN", ,);

	ДобавитьСтрокуВСловарь(Словарь, "ПО"                    , "BY"       ,"ВЫБРАТЬ"       , "ИНДЕКСИРОВАТЬ ПО");
	ДобавитьСтрокуВСловарь(Словарь, "ПО"                    , "BY"       ,"ВЫБРАТЬ"       , "СГРУППИРОВАТЬ ПО");
	ДобавитьСтрокуВСловарь(Словарь, "ПО"                    , "BY"       ,"УПОРЯДОЧИТЬ ПО", );
	ДобавитьСтрокуВСловарь(Словарь, "ПО"                    , "BY"       ,"ИТОГИ"         , );
	ДобавитьСтрокуВСловарь(Словарь, "ПО"                    , "ON"       ,"ВЫБРАТЬ"       , "ИЗ");
	
	Возврат Словарь;
	
КонецФункции // СоздатьАнглоРусскийСловарь()

Процедура ДобавитьСтрокуВСловарь(Словарь, Русский, Английский, Секция = "", Предложение = "")

	НоваяСтрока = Словарь.Добавить();
	НоваяСтрока.Русский     = Русский;
	НоваяСтрока.Английский  = Английский;
	НоваяСтрока.Секция      = Секция;
	НоваяСтрока.Предложение = Предложение;

КонецПроцедуры

// ++ tristarr1 Оптимизация открытия формы выбора типов.
Функция СфоримироватьСтруктуруТипов() Экспорт

	СтруктураТипов = СформироватьСтруктуруТипов();
	СтруктураИзображений = ПолучитьСтруктуруИзображений();
	Дерево = СтруктураТипов.ДеревоТипов;
	Таблица = СтруктураТипов.ТаблицаТипов;
	
	ЗаполнитьСтрокуДерева(Дерево, "Число"                    , "Число"                   , СтруктураИзображений.Число);
	ЗаполнитьСтрокуДерева(Дерево, "Строка"                   , "Строка"                  , СтруктураИзображений.Строка);
	ЗаполнитьСтрокуДерева(Дерево, "Дата"                     , "Дата"                    , СтруктураИзображений.Дата);
	ЗаполнитьСтрокуДерева(Дерево, "Булево"                   , "Булево"                  , СтруктураИзображений.Булево);
	ЗаполнитьСтрокуДерева(Дерево, "УникальныйИдентификатор"  , "Уникальный идентификатор", СтруктураИзображений.УникальныйИдентификатор);
	ЗаполнитьСтрокуДерева(Дерево, "Null"                     , "Null"                    , );
	ЗаполнитьСтрокуДерева(Дерево, "Неопределено"             , "Неопределено"            , );

	ВывестиКоллекцию(Дерево, "Справочники"                   , "Справочник");
	ВывестиКоллекцию(Дерево, "Документы"                     , "Документ");
	ВывестиКоллекцию(Дерево, "Перечисления"                  , "Перечисление");
	ВывестиКоллекцию(Дерево, "ПланыВидовХарактеристик"       , "ПланВидовХарактеристик");
	ВывестиКоллекцию(Дерево, "ПланыСчетов"                   , "ПланСчетов");
	ВывестиКоллекцию(Дерево, "ПланыВидовРасчета"             , "ПланВидовРасчета");
	ВывестиКоллекцию(Дерево, "БизнесПроцессы"                , "БизнесПроцесс");
	ВывестиКоллекцию(Дерево, "Задачи"                        , "Задача");
	
	ЗаполнитьСтрокуТаблицы(Таблица, "ТаблицаЗначений"        , "Таблица значений"         , СтруктураИзображений.ТаблицаЗначений);
	ЗаполнитьСтрокуТаблицы(Таблица, "МоментВремени"          , "Момент времени"           , СтруктураИзображений.МоментВремени);
	ЗаполнитьСтрокуТаблицы(Таблица, "Граница"                , "Граница"                  , БиблиотекаКартинок.УстановитьИнтервал);
	
	ЗаполнитьСтрокуТаблицы(Таблица, "ВидДвиженияНакопления"  , "Вид движения накопления"  , БиблиотекаКартинок.УстановитьИнтервал);
	ЗаполнитьСтрокуТаблицы(Таблица, "ВидСчета"               , "Вид счета"                , БиблиотекаКартинок.УстановитьИнтервал);
	ЗаполнитьСтрокуТаблицы(Таблица, "ВидДвиженияБухгалтерии" , "Вид движения бухгалтерии ", БиблиотекаКартинок.УстановитьИнтервал);		
	
	Возврат СтруктураТипов;
КонецФункции

Функция СформироватьСтруктуруТипов() 
	ДеревоТипов = Новый ДеревоЗначений;
	ДеревоТипов.Колонки.Добавить("Выбрать",Новый ОписаниеТипов("Булево"));
	ДеревоТипов.Колонки.Добавить("ИмяТипа",Новый ОписаниеТипов("Строка"));
	ДеревоТипов.Колонки.Добавить("Картинка",Новый ОписаниеТипов("Картинка"));
	ДеревоТипов.Колонки.Добавить("Синоним",Новый ОписаниеТипов("Строка"));
	
	ТаблицаТипов = Новый ТаблицаЗначений;
	ТаблицаТипов.Колонки.Добавить("Выбрать",Новый ОписаниеТипов("Булево"));
	ТаблицаТипов.Колонки.Добавить("ИмяТипа",Новый ОписаниеТипов("Строка"));
	ТаблицаТипов.Колонки.Добавить("Картинка",Новый ОписаниеТипов("Картинка"));
	ТаблицаТипов.Колонки.Добавить("Синоним",Новый ОписаниеТипов("Строка"));
	
	Возврат Новый Структура("ДеревоТипов,ТаблицаТипов",ДеревоТипов,ТаблицаТипов);
КонецФункции

Функция ЗаполнитьСтрокуДерева(КонтейнерСтрок, ИмяТипа = "", Синоним = "", Картинка = Неопределено)

	НоваяСтрока = КонтейнерСтрок.Строки.Добавить();
	НоваяСтрока.ИмяТипа  = ИмяТипа;
	НоваяСтрока.Синоним  = Синоним;
	Если НЕ Картинка = Неопределено Тогда
		НоваяСтрока.Картинка = Картинка;
	КонецЕсли;
	
    Возврат НоваяСтрока;
	
КонецФункции

Функция ВывестиКоллекцию(КонтейнерСтрок, ИмяКоллекции = "", ИмяЭлемента = "")

	Ветка = ЗаполнитьСтрокуДерева(КонтейнерСтрок, ИмяКоллекции, ИмяЭлемента + "Ссылка", БиблиотекаКартинок[ИмяЭлемента]);

	Для каждого МетаДок Из Метаданные[ИмяКоллекции] Цикл
		ЗаполнитьСтрокуДерева(Ветка, МетаДок.Имя, ИмяЭлемента + "Ссылка." + МетаДок.Имя, БиблиотекаКартинок[ИмяЭлемента]);
	КонецЦикла; 
	
КонецФункции

Функция ПолучитьСТруктуруИзображений()
	СтруктураИзображений = Новый Структура;
	МакетИзображений = ПолучитьМакет("ИзображенияМетаданных");
	Для Каждого ОбластьТД ИЗ МакетИзображений.Области Цикл
		Если ТипЗнч(ОбластьТД) = Тип("РисунокТабличногоДокумента") Тогда
			СтруктураИзображений.Вставить(ОбластьТД.Имя,ОбластьТД.Картинка);
		КонецЕсли;
	КонецЦикла;
	Возврат СтруктураИзображений;
КонецФункции

Процедура ЗаполнитьСтрокуТаблицы(КонтейнерСтрок, ИмяТипа = "", Синоним = "", Картинка = Неопределено)

	НоваяСтрока = КонтейнерСтрок.Добавить();
	НоваяСтрока.ИмяТипа  = ИмяТипа;
	НоваяСтрока.Синоним  = Синоним;
	Если НЕ Картинка = Неопределено Тогда
		НоваяСтрока.Картинка = Картинка;
	КонецЕсли;
	
КонецПроцедуры
// -- tristarr1 Оптимизация открытия формы выбора типов.

Функция ПроверитНаличиеИспользуемыхПеременных(Знач Текст)

	ОписаниеОшибки = "";
	
	МассивСлов = Новый Массив;
	МассивСлов.Добавить("ппСтруктураДанных");
	МассивСлов.Добавить("ппМВТ");
	МассивСлов.Добавить("ппПутьКХранилищу");
	МассивСлов.Добавить("ЭтотОбъект");
	МассивСлов.Добавить("ппХранилище");
	МассивСлов.Добавить("ЗапросИД");
	МассивСлов.Добавить("ппОтбор");
	МассивСлов.Добавить("ппЗапрос");
	
	МассивНайденыхСлов = Новый Массив;
	
	Текст2 = "";
	
	Для i = 1 По СтрДлина(Текст) Цикл
		
		ТекСимвол = Сред(Текст, i, 1);
		Текст2 = Текст2 + ?(ПустаяСтрока(ТекСимвол), " ", ТекСимвол);
	
	КонецЦикла;
	
	Текст2 = ВРег(" " + Текст2 + " ");
	
	Для каждого Элемент Из МассивСлов Цикл
	
		Если Найти(Текст2, ВРег(" " + Элемент + " ")) Тогда
		
			МассивНайденыхСлов.Добавить(Элемент);
		
		КонецЕсли; 
	
	КонецЦикла;

	Если МассивНайденыхСлов.Количество() > 0 Тогда
		
		ОписаниеОшибки = "Выражение параметра содержит используемые имена переменных: " + Символы.ПС;
		
		Первый = Истина;
		Для каждого Элемент Из МассивНайденыхСлов Цикл
			
			ОписаниеОшибки = ОписаниеОшибки + ?(Первый, "", ", ") + """" + Элемент + """";
			Первый = Ложь;
		КонецЦикла;
		
		ОписаниеОшибки = ОписаниеОшибки + ".";
		
	КонецЕсли;
	
	
	Возврат ОписаниеОшибки;
	
КонецФункции

Функция СоздатьТекстПрисвоенияЗначенийПеременнымПараметров(ПутьКХранилищу, ИД, РежимСовместимости) Экспорт
	
	ЭтотОбъект.РежимСовместимости = РежимСовместимости;
	
	ТекстКода = "";
	
	пХранилище = ПолучитьИзВременногоХранилища(ПутьКХранилищу);
	
	пТабПараметров = пХранилище.ТабПараметров;
	
	ОтборИД = Новый Структура("ИД", ИД);
	
	пТабПараметровИД = пТабПараметров.НайтиСтроки(ОтборИД);
	
	Для каждого СтрокаПараметра Из пТабПараметровИД Цикл
		
		Если НЕ СтрокаПараметра.Используется Тогда 
			Продолжить;
		КонецЕсли;
		
		Если СтрокаПараметра.ОграничениеТипов.СписокЗначений Тогда
			ТекстКода = ТекстКода + "	" + СтрокаПараметра.Название + " = Новый Массив;" + Символы.ПС;
			Для каждого Запись Из СтрокаПараметра.Значение Цикл
				ПЗ = ПредставлениеЗначения(Запись.Значение);
				ТекстКода = ТекстКода + "	" + СтрокаПараметра.Название + ".Добавить(" + ПЗ.Значение + ");" + ПЗ.Комментарий + Символы.ПС;
			КонецЦикла; 
		ИначеЕсли СтрокаПараметра.Вычисляемый Тогда
			ПЗ = ОбработатьТекстПараметра(СтрокаПараметра.Значение, СтрокаПараметра.Название);
			ТекстКода = ТекстКода + ПЗ.Значение + Символы.ПС;
		Иначе
			ПЗ = ПредставлениеЗначения(СтрокаПараметра.Значение);
			ТекстКода = ТекстКода + "	" + СтрокаПараметра.Название + " = " + ПЗ.Значение + ";" + ПЗ.Комментарий + Символы.ПС;
		КонецЕсли; 
		
		ТекстКода = ТекстКода + Символы.ПС;

	КонецЦикла;
	
	Возврат ТекстКода;
	
КонецФункции

Функция ПредставлениеЗначения(Значение)

	Комментарий = "";
	Представление = Значение;
	
	Если Значение = Неопределено Тогда
		Представление = "Неопределено";
	ИначеЕсли ТипЗнч(Значение) = Тип("Строка") Тогда
		Представление = Значение;
	ИначеЕсли ТипЗнч(Значение) = Тип("Число") Тогда
		Представление = Формат(Значение, "ЧРД=.; ЧГ=0");
	ИначеЕсли ТипЗнч(Значение) = Тип("Булево") Тогда
		Представление = Формат(Значение, "БЛ=Ложь; БИ=Истина");
	ИначеЕсли ТипЗнч(Значение) = Тип("Дата") Тогда
		Представление = Формат(Значение, "ДФ='Дата(yyyy, MM, dd, HH, mm, ss)'; ДП='Дата(1, 1, 1, 0, 0, 0)'");
		
	ИначеЕсли Справочники.ТипВсеСсылки().СодержитТип(ТипЗнч(Значение)) Тогда
		ПолноеИмяКоллекции = Метаданные.НайтиПоТипу(ТипЗнч(Значение)).ПолноеИмя();
		ИмяКоллекции = Сред(ПолноеИмяКоллекции, ВхождениеСтроки(ПолноеИмяКоллекции, ".") + 1);
		Если Значение.Предопределенный Тогда
			Представление = "Справочники." + ИмяКоллекции + "." + Справочники[ИмяКоллекции].ПолучитьИмяПредопределенного(Значение); 
			Комментарий = " // " + Значение.Наименование + " (" + Значение.Код + ")";
		ИначеЕсли Значение.Пустая() Тогда
			Представление = "Справочники." + ИмяКоллекции + ".ПустаяСсылка()";
			Комментарий = " // " + Представление;
		Иначе
			Представление = "Справочники." + ИмяКоллекции + ".НайтиПоНаименованию(""" + Значение.Наименование + """)";
			Комментарий = " // " + Значение.Наименование + " (" + Значение.Код + ")";
		КонецЕсли; 
		
	ИначеЕсли Документы.ТипВсеСсылки().СодержитТип(ТипЗнч(Значение)) Тогда
		ПолноеИмяКоллекции = Метаданные.НайтиПоТипу(ТипЗнч(Значение)).ПолноеИмя();
		ИмяКоллекции = Сред(ПолноеИмяКоллекции, ВхождениеСтроки(ПолноеИмяКоллекции, ".") + 1);
		Если Значение.Пустая() Тогда
			Представление = "Документы." + ИмяКоллекции + ".ПустаяСсылка()";
			Комментарий = " // " + Представление;
		Иначе
			Представление = "Документы." + ИмяКоллекции + ".НайтиПоНомеру(""" + Формат(Значение.Номер, "ЧГ=0") + """, " + Формат(Значение.Дата, "ДФ='Дата(yyyy, MM, dd, HH, mm, ss)'; ДП='Дата(1, 1, 1, 0, 0, 0)'") + ")";
			Комментарий = " // " + Строка(Значение);
		КонецЕсли; 
		
	ИначеЕсли Перечисления.ТипВсеСсылки().СодержитТип(ТипЗнч(Значение)) Тогда
		ИмяКоллекции = Значение.Метаданные().Имя;
		Если Значение.Пустая() Тогда
			Представление = "Перечисления." + ИмяКоллекции + ".ПустаяСсылка()";
			Комментарий = " // " + Представление;
		Иначе
			ИндексЭлемента = Перечисления[ИмяКоллекции].Индекс(Значение);
			ИмяЗначения = Метаданные.Перечисления[ИмяКоллекции].ЗначенияПеречисления[ИндексЭлемента].Имя;
			Представление = "Перечисления." + ИмяКоллекции + "." + ИмяЗначения;
			Комментарий = " // " + Строка(Значение);
		КонецЕсли;	
		
	ИначеЕсли ПланыВидовХарактеристик.ТипВсеСсылки().СодержитТип(ТипЗнч(Значение)) Тогда
		ПолноеИмяКоллекции = Метаданные.НайтиПоТипу(ТипЗнч(Значение)).ПолноеИмя();
		ИмяКоллекции = Сред(ПолноеИмяКоллекции, ВхождениеСтроки(ПолноеИмяКоллекции, ".") + 1);
		Если Значение.Предопределенный Тогда
			Представление = "ПланыВидовХарактеристик." + ИмяКоллекции + "." + ПланыВидовХарактеристик[ИмяКоллекции].ПолучитьИмяПредопределенного(Значение); 
			Комментарий = " // " + Значение.Наименование + " (" + Значение.Код + ")";
		ИначеЕсли Значение.Пустая() Тогда
			Представление = "ПланыВидовХарактеристик." + ИмяКоллекции + ".ПустаяСсылка()";
			Комментарий = " // " + Представление;
		Иначе
			Представление = "ПланыВидовХарактеристик." + ИмяКоллекции + ".НайтиПоНаименованию(""" + Значение.Наименование + """)";
			Комментарий = " // " + Значение.Наименование + " (" + Значение.Код + ")";
		КонецЕсли; 
		
	ИначеЕсли ПланыСчетов.ТипВсеСсылки().СодержитТип(ТипЗнч(Значение)) Тогда
		ПолноеИмяКоллекции = Метаданные.НайтиПоТипу(ТипЗнч(Значение)).ПолноеИмя();
		ИмяКоллекции = Сред(ПолноеИмяКоллекции, ВхождениеСтроки(ПолноеИмяКоллекции, ".") + 1);
		Если Значение.Предопределенный Тогда
			Представление = "ПланыСчетов." + ИмяКоллекции + "." + ПланыСчетов[ИмяКоллекции].ПолучитьИмяПредопределенного(Значение); 
			Комментарий = " // " + Значение.Код + " " + Значение.Наименование;
		ИначеЕсли Значение.Пустая() Тогда
			Представление = "ПланыСчетов." + ИмяКоллекции + ".ПустаяСсылка()";
			Комментарий = " // " + Представление;
		Иначе
			Представление = "ПланыСчетов." + ИмяКоллекции + ".НайтиПоКоду(" + Значение.Код + ")";
			Комментарий = " // " + Значение.Код + " " + Значение.Наименование;
		КонецЕсли; 
		
	ИначеЕсли ПланыВидовРасчета.ТипВсеСсылки().СодержитТип(ТипЗнч(Значение)) Тогда
		ПолноеИмяКоллекции = Метаданные.НайтиПоТипу(ТипЗнч(Значение)).ПолноеИмя();
		ИмяКоллекции = Сред(ПолноеИмяКоллекции, ВхождениеСтроки(ПолноеИмяКоллекции, ".") + 1);
		Если Значение.Предопределенный Тогда
			Представление = "ПланыВидовРасчета." + ИмяКоллекции + "." + ПланыВидовРасчета[ИмяКоллекции].ПолучитьИмяПредопределенного(Значение); 
			Комментарий = " // " + Значение.Наименование + " (" + Значение.Код + ")";
		ИначеЕсли Значение.Пустая() Тогда
			Представление = "ПланыВидовРасчета." + ИмяКоллекции + ".ПустаяСсылка()";
			Комментарий = " // " + Представление;
		Иначе
			Представление = "ПланыВидовРасчета." + ИмяКоллекции + ".НайтиПоНаименованию(""" + Значение.Наименование + """)";
			Комментарий = " // " + Значение.Наименование + " (" + Значение.Код + ")";
		КонецЕсли; 
		
	ИначеЕсли БизнесПроцессы.ТипВсеСсылки().СодержитТип(ТипЗнч(Значение)) Тогда
		ПолноеИмяКоллекции = Метаданные.НайтиПоТипу(ТипЗнч(Значение)).ПолноеИмя();
		ИмяКоллекции = Сред(ПолноеИмяКоллекции, ВхождениеСтроки(ПолноеИмяКоллекции, ".") + 1);
		
		Если Значение.Пустая() Тогда
			Представление = "БизнесПроцессы." + ИмяКоллекции + ".ПустаяСсылка()";
			Комментарий = " // " + Представление;
		Иначе
			Представление = "БизнесПроцессы." + ИмяКоллекции + ".НайтиПоНомеру(""" + Формат(Значение.Номер, "ЧГ=0") + """)";
			Комментарий = " // " + Строка(Значение);
		КонецЕсли;
		
	ИначеЕсли Задачи.ТипВсеСсылки().СодержитТип(ТипЗнч(Значение)) Тогда
		ПолноеИмяКоллекции = Метаданные.НайтиПоТипу(ТипЗнч(Значение)).ПолноеИмя();
		ИмяКоллекции = Сред(ПолноеИмяКоллекции, ВхождениеСтроки(ПолноеИмяКоллекции, ".") + 1);
		
		Если Значение.Пустая() Тогда
			Представление = "Задачи." + ИмяКоллекции + ".ПустаяСсылка()";
			Комментарий = " // " + Представление;
		Иначе
			Представление = "Задачи." + ИмяКоллекции + ".НайтиПоНаименованию(""" + Формат(Значение.Наименование, "ЧГ=0") + """)";
			Комментарий = " // " + Строка(Значение);
		КонецЕсли;
		
	КонецЕсли; 
	
	Возврат Новый Структура("Значение,Комментарий", Представление, Комментарий);

КонецФункции

Функция ОбработатьТекстПараметра(Значение, ИмяПараметра)

	ТекстДок = Новый ТекстовыйДокумент;
	ТекстДок.УстановитьТекст(Значение);
	Строк = ТекстДок.КоличествоСтрок();
	
	НовыйТекстДок = Новый ТекстовыйДокумент;
	
	i = 1;
	Для i = 1 По Строк Цикл
	
		ТекСтроа = СокрЛП(ТекстДок.ПолучитьСтроку(i));
		
		Если ПустаяСтрока(ТекСтроа) Тогда
			НовыйТекстДок.ДобавитьСтроку("");
		ИначеЕсли Лев(ТекСтроа, 2) = "//" Тогда
			// закоментированное игнорируется
		ИначеЕсли НРег(Лев(ТекСтроа, 8)) = "параметр" Тогда
			НовыйТекстДок.ДобавитьСтроку("	" + ИмяПараметра + Сред(ТекСтроа, 9));
		Иначе
			НовыйТекстДок.ДобавитьСтроку("	" + ТекСтроа);
		КонецЕсли; 
		
	КонецЦикла; 
	
	СтрокВНовом = ТекстДок.КоличествоСтрок();
	
	i = 1;
	НовыйТекст = "";
	Для i = 1 По СтрокВНовом Цикл
	
		ТекСтроа = СокрЛП(НовыйТекстДок.ПолучитьСтроку(i));
		НовыйТекст = НовыйТекст + Символы.ПС + "	" + ТекСтроа;
		
	КонецЦикла; 

	Возврат Новый Структура("Значение,Комментарий", "	" + СокрЛП(НовыйТекст), "");

КонецФункции

Функция ВхождениеСтроки(Текст, ИскомыйТекст)

	ВозвращаемоеЗначение = 0;
	
	Если ЭтотОбъект.РежимСовместимости = "НеИспользовать" Тогда
		Выполнить("ВозвращаемоеЗначение = СтрНайти(Текст, ИскомыйТекст);");
	Иначе
		Выполнить("ВозвращаемоеЗначение = Найти(Текст, ИскомыйТекст);");
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;

КонецФункции // ВхождениеСтроки()


//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//           ПРОГРАММНЫЙ ИНТЕРФЕЙС АВТОРЕГИСТРАЦИИ В СПРАВОЧНИКЕ ДОПОЛНИТЕЛЬНЫЕ ОТЧЕТЫ И ОБРАБОТКИ

Функция СведенияОВнешнейОбработке() Экспорт

	лВидОбработки	= "ДополнительнаяОбработка";// "ДополнительныйОтчет"
	лОбработкаИспользование = "ОткрытиеФормы";	// "ВызовСерверногоМетода"

	лНазначение		= Неопределено;
	лБезопасныйРежим= Ложь;
	лВерсияБСП		= "2.0.1.3";

	лОбработкаИдентификатор	= Метаданные().Имя;
	лОбработкаНаименование	= НСтр("ru = '" +Метаданные().Представление()+ "'");
	лОбработкаОписание		= НСтр("ru = '" +Метаданные().Комментарий+ "'");


	лТаблицаКоманд	= ПолучитьТаблицуКоманд();
	ДобавитьКоманду(лТаблицаКоманд,
					лОбработкаНаименование,
					лОбработкаИдентификатор,
					лОбработкаИспользование);

	лПараметрыРегистрации = Новый Структура;
	лПараметрыРегистрации.Вставить("Вид"			, лВидОбработки);
	лПараметрыРегистрации.Вставить("Назначение"		, лНазначение);
	лПараметрыРегистрации.Вставить("БезопасныйРежим", лБезопасныйРежим);
	лПараметрыРегистрации.Вставить("ВерсияБСП"		, лВерсияБСП);
	лПараметрыРегистрации.Вставить("Наименование"	, лОбработкаНаименование);
	лПараметрыРегистрации.Вставить("Информация"		, лОбработкаОписание);
	лПараметрыРегистрации.Вставить("Версия"			, мВерсияОбработки);
	лПараметрыРегистрации.Вставить("Команды"		, лТаблицаКоманд);

	Возврат лПараметрыРегистрации;
КонецФункции

Функция ПолучитьТаблицуКоманд()

	лТипСтрока = Новый ОписаниеТипов("Строка");
	лТипБулево = Новый ОписаниеТипов("Булево");

	лКоманды = Новый ТаблицаЗначений;

	лКоманды.Колонки.Добавить("Представление"		, лТипСтрока);
	лКоманды.Колонки.Добавить("Идентификатор"		, лТипСтрока);
	лКоманды.Колонки.Добавить("Использование"		, лТипСтрока);
	лКоманды.Колонки.Добавить("ПоказыватьОповещение", лТипБулево);
	лКоманды.Колонки.Добавить("Модификатор"			, лТипСтрока);

	Возврат лКоманды;
КонецФункции  

Процедура ДобавитьКоманду(пТаблицаКоманд, пПредставление, пИдентификатор, пИспользование, пПоказыватьОповещение = Ложь, пМодификатор = "")

	лНоваяКоманда = пТаблицаКоманд.Добавить();
	лНоваяКоманда.Представление			= пПредставление;
	лНоваяКоманда.Идентификатор			= пИдентификатор;
	лНоваяКоманда.Использование			= пИспользование;
	лНоваяКоманда.ПоказыватьОповещение	= пПоказыватьОповещение;
	лНоваяКоманда.Модификатор			= пМодификатор;

КонецПроцедуры


мВерсияОбработки= "8.3.2.24";