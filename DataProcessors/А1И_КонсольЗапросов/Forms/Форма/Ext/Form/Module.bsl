// AKOR ОМСК

&НаКлиенте
Перем ПараметрыТЗ_ТекущиеДанные;

////////////////////////////////////////////////////////////////////////
// ОРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Об = РеквизитФормыВЗначение("Объект");
	СтруктураХранилища = Об.СоздатьСтруктуру();
	
	СтруктураХранилища.Вставить("УникальныйИдентификаторФормы", ЭтаФорма.УникальныйИдентификатор);

	Объект.ПутьКХранилищу = ПоместитьВоВременноеХранилище(СтруктураХранилища, ЭтаФорма.УникальныйИдентификатор);

	ДобавитьНовуюСтрокуДЗ(Неопределено, Ложь);
	
	СисИнфо = Новый СистемнаяИнформация;
	Объект.ВерсияПриложения = СисИнфо.ВерсияПриложения;
	
	Если Лев(Объект.ВерсияПриложения, 3) = "8.2" Тогда
		Объект.МодальностьРазрешена = Истина;
	Иначе
		Выполнить("Объект.МодальностьРазрешена = Метаданные.РежимИспользованияМодальности = Метаданные.СвойстваОбъектов.РежимИспользованияМодальности.Использовать;");
	КонецЕсли;
	
	Объект.РежимСовместимости = Строка(Метаданные.РежимСовместимости); // Метаданные.СвойстваОбъектов.РежимСовместимости.Версия8_3_5
	
	//Объект.МодальностьЗапрещена = Метаданные.РежимИспользованияМодальности = Метаданные.СвойстваОбъектов.РежимИспользованияМодальности.НеИспользовать;

	Элементы.КомментарийКТекстуЗапроса.Видимость = Ложь;
	
	#Если Клиент Тогда
	Элементы.БуферОбмена.Видимость = Истина;
	#Иначе
	Элементы.БуферОбмена.Видимость = Ложь;
	#КонецЕсли
	
	ЗаполнитьДеревоФункцийЯзыкаЗапросов();
	
	МетаданныеОбработки = Об.Метаданные();
	Заголовок = МетаданныеОбработки.Синоним + " " + МетаданныеОбработки.Комментарий + ". Файл: ";
	
	СчетчикСтраниц = 1;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	Элементы.ДеревоЗапросовСохранитьДеревоЗапросов.Доступность =  НЕ ПустаяСтрока(Объект.ПутьКФайлуЗапроса);
	
	НовыйЗаголовок = Лев(Заголовок, СтрНайти(Заголовок, ". Файл: ",,,) + 8);
	Заголовок = НовыйЗаголовок + ?(ПустаяСтрока(Объект.ПутьКФайлуЗапроса), "Не сохранен", Объект.ПутьКФайлуЗапроса) + ".";

КонецПроцедуры

&НаСервере
Процедура ПриСохраненииДанныхВНастройкахНаСервере(Настройки)
	
	СтруктураПараметров = ПолучитьИзВременногоХранилища(Объект.ПутьКХранилищу);
	
	// Удаление выгруженых ТЗ
	пТаблицаПакетов = СтруктураПараметров.ТаблицаПакетов;
	пСтруктураТЗ    = СтруктураПараметров.СтруктураТЗ;
	
	Для каждого СтрокаПакета Из пТаблицаПакетов Цикл
		Если НЕ СтрокаПакета.Адрес = "" И пСтруктураТЗ.Свойство(СтрокаПакета.Адрес) Тогда
			пСтруктураТЗ.Удалить(СтрокаПакета.Адрес);
		КонецЕсли;
		СтрокаПакета.Адрес = "";
	КонецЦикла;
	
	Если СтруктураПараметров.Свойство("СтруктураТипов") Тогда
		СтруктураПараметров.Удалить("СтруктураТипов");	
	КонецЕсли;

	СтруктураПараметров.СтруктурыРезультатовЗапросовТабДоков.Очистить();
	СтруктураПараметров.СтруктураРезультатовЗапросов.Очистить();
	//СтруктураПараметров.Вставить("ПутьКФайлуЗапроса", Объект.ПутьКФайлуЗапроса);

	Настройки.Вставить("СтруктураПараметров", СтруктураПараметров);
	
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	СтруктураПараметров = Настройки["СтруктураПараметров"];
	
	Если НЕ СтруктураПараметров = Неопределено Тогда
		
		Об = РеквизитФормыВЗначение("Объект");
		СтруктураХранилища = Об.СоздатьСтруктуру();
		ОбновитьРеквизиты(СтруктураПараметров, СтруктураХранилища);
		Объект.ПутьКХранилищу = ПоместитьВоВременноеХранилище(СтруктураПараметров, ЭтаФорма.УникальныйИдентификатор);
		//Об.ПутьКФайлуЗапроса = СтруктураХранилища.ПутьКФайлуЗапроса;
		//ЗначениеВРеквизитФормы(Об, "Объект");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	//++
	Если ЗавершениеРаботы Тогда
		ТекстПредупреждения = 
		"Внимание! Если, в консоли запросов имеются несохранённые данные, то они будут потеряны!
		|Для сохранения изменений нажмите ""Продолжить работу"", закройте консоль запросов, а потом завершите работу приложение.";
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	//--
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьРеквизиты(Проверяемые, Шаблон)
	
	Для каждого ЭлементШаблона Из Шаблон Цикл
		
		пЗначениеПроверяемое = Неопределено;
		Если НЕ Проверяемые.Свойство(ЭлементШаблона.Ключ, пЗначениеПроверяемое) Тогда
			Проверяемые.Вставить(ЭлементШаблона.Ключ, ЭлементШаблона.Значение);
			Продолжить;
		КонецЕсли;
		
		Если ТипЗнч(пЗначениеПроверяемое) = Тип("ТаблицаЗначений") Тогда
			КолонкиШаблона = ЭлементШаблона.Значение.Колонки;
			Для каждого пКолШ Из КолонкиШаблона Цикл
				НайденаяКолонка = пЗначениеПроверяемое.Колонки.Найти(пКолШ.Имя);
				Если НайденаяКолонка = Неопределено Тогда
					пЗначениеПроверяемое.Колонки.Добавить(пКолШ.Имя, пКолШ.ТипЗначения);
				Иначе // проверим тип
					Если НЕ НайденаяКолонка.ТипЗначения = пКолШ.ТипЗначения Тогда
						пЗначениеПроверяемое.Колонки.Удалить(НайденаяКолонка);
						пЗначениеПроверяемое.Колонки.Добавить(пКолШ.Имя, пКолШ.ТипЗначения);
					КонецЕсли;
				КонецЕсли;
			КонецЦикла; 
		КонецЕсли;
		
	КонецЦикла; 
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДеревоФункцийЯзыкаЗапросов()

	Макет = РеквизитФормыВЗначение("Объект").ПолучитьМакет("Макет");
	МассивГоризонтальный = Новый Массив;
	СоответствиеКоманд = Новый Структура;
	Дерево = ДанныеФормыВЗначение(ФункцииЯзыкаЗапросов, Тип("ДеревоЗначений"));
	
	Родитель = Дерево;
	
	R = 0;
	Пока Истина Цикл
		R = R + 1;
		Область = Макет.Область(R, 1);
		ТекстЯчейки = Область.Текст;
	    Если ПустаяСтрока(ТекстЯчейки) Тогда
			Прервать;
		КонецЕсли;
		
		Уровень = Область.Отступ;
		Пока МассивГоризонтальный.ВГраница() < Уровень Цикл
			МассивГоризонтальный.Добавить("");
		КонецЦикла;
		
		Если Уровень = 0 Тогда
		   Родитель = Дерево;
		Иначе	
		   Родитель = МассивГоризонтальный[Уровень-1];
		КонецЕсли;

		ТекСтрока = Родитель.Строки.Добавить();
		МассивГоризонтальный[Уровень] = ТекСтрока;
		
		ТекСтрока.Наименование = ТекстЯчейки;

	КонецЦикла;
	
	ЗначениеВДанныеФормы(Дерево, ФункцииЯзыкаЗапросов);

КонецПроцедуры



////////////////////////////////////////////////////////////////////////
// ОРАБОТЧИКИ СОБЫТИЙ ДЕРЕВА ЗАПРОСОВ

&НаКлиенте
Процедура ДеревоЗапросовПриАктивизацииСтроки(Элемент)

	Если Элементы.ДеревоЗапросов.ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ТекСтрокаДЗ = Элементы.ДеревоЗапросов.ТекущаяСтрока Тогда
		
		ТекСтрокаДЗ = Элементы.ДеревоЗапросов.ТекущаяСтрока;
		ПроверитьТекстЗапроса_ПолучитьПараметры_ОбновитьДанные(, Ложь, );
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоЗапросовПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Истина;
	ИдентификаторСтроки = Элемент.ТекущиеДанные;
	Если НЕ ИдентификаторСтроки = Неопределено Тогда
		ИдентификаторСтроки = ИдентификаторСтроки.ПолучитьИдентификатор();
	КонецЕсли;
	ДобавитьНовуюСтрокуДЗ(ИдентификаторСтроки, Копирование);
	
КонецПроцедуры

&НаСервере
Процедура  ДобавитьНовуюСтрокуДЗ(ИДСтроки, Копирование)
	
	ДЗ = ДанныеФормыВЗначение(ДеревоЗапросов, Тип("ДеревоЗначений"));
	
	Если ИДСтроки = Неопределено Тогда
		ИДСтроки = 0;
		СтрокаРодитель = ДЗ;
	Иначе
		ИД = ЭтаФорма.ДеревоЗапросов.НайтиПоИдентификатору(ИДСтроки).ИД;
		СтрокаРодитель = ДЗ.Строки.Найти(ИД, "ИД", Истина);
	КонецЕсли;
	
	НоваяСтрокаДЗ = СтрокаРодитель.Строки.Добавить();
	Если Копирование Тогда
		ЗаполнитьЗначенияСвойств(НоваяСтрокаДЗ, СтрокаРодитель);
	КонецЕсли; 
	
	ИДСтроки = Строка(Формат(ТекущаяДата(), "ДФ=yyyyMMddHHmmss"));
	НоваяСтрокаДЗ.ИД = ИДСтроки;
	НоваяСтрокаДЗ.Наименование = "Запрос";
	ЗначениеВДанныеФормы(ДЗ, ДеревоЗапросов);
	Элементыдерева = ДеревоЗапросов.ПолучитьЭлементы();
	
	ИдентификаторСтроки = Неопределено;
	ПолучитьИдентификаторСтрокиДереваПоЗначениюПоля("ИД", ИдентификаторСтроки, Элементыдерева, ИДСтроки, Ложь);
	Элементы.ДеревоЗапросов.ТекущаяСтрока = ИдентификаторСтроки;
	
	Если Копирование Тогда
		СкопироватьПараметрыЗапроса(СтрокаРодитель.ИД, НоваяСтрокаДЗ.ИД);
	КонецЕсли; 

КонецПроцедуры

&НаСервере
Процедура СкопироватьПараметрыЗапроса(ИД_Источника, ИД_Копии)

	Отбор = Новый Структура("ИД", ИД_Источника);
	
	пХранилище = ПолучитьИзВременногоХранилища(Объект.ПутьКХранилищу);
	пТабПараметров = пХранилище.ТабПараметров;
	
	ОтобранныеСтроки = пТабПараметров.НайтиСтроки(Отбор);
	
	Для каждого СтрокаПарам Из ОтобранныеСтроки Цикл
		НовСтр = пТабПараметров.Добавить();
		ЗаполнитьЗначенияСвойств(НовСтр, СтрокаПарам);
		НовСтр.ИД = ИД_Копии;
	КонецЦикла;

	пТабПакетов = пХранилище.ТаблицаПакетов;
	
	ОтобранныеСтроки = пТабПакетов.НайтиСтроки(Отбор);
	
	Для каждого СтрокаПарам Из ОтобранныеСтроки Цикл
		НовСтр = пТабПакетов.Добавить();
		ЗаполнитьЗначенияСвойств(НовСтр, СтрокаПарам);
		НовСтр.ИД = ИД_Копии;
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура ДеревоЗапросовПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	УдалитьПараметрыЗапроса(Элемент.ТекущиеДанные.ИД);
	
КонецПроцедуры

&НаСервере
Процедура УдалитьПараметрыЗапроса(ИДСтроки)
	
	пХранилище      = ПолучитьИзВременногоХранилища(Объект.ПутьКХранилищу);
	пТабПараметров  = пХранилище.ТабПараметров;
	пТаблицаПакетов = пХранилище.ТаблицаПакетов;
	пСтруктураТЗ    = пХранилище.СтруктураТЗ;

	ДЗ = ДанныеФормыВЗначение(ДеревоЗапросов, Тип("ДеревоЗначений"));
	СтрДЗ = ДЗ.Строки.НайтиСтроки(Новый Структура("ИД", ИДСтроки), Истина)[0];
	МассивИД = Неопределено;
	ПолучитьИДВсейВеткиИзДЗ(СтрДЗ, МассивИД);
	
	Если СтрДЗ.Родитель = Неопределено Тогда
		ДЗ.Строки.Удалить(СтрДЗ);
	Иначе
		СтрДЗ.Родитель.Строки.Удалить(СтрДЗ);
	КонецЕсли; 
	
	ЗначениеВДанныеФормы(ДЗ, ДеревоЗапросов);

	Для каждого СтрокаИД Из МассивИД Цикл
		
		Отбор = Новый Структура("ИД", СтрокаИД);
		
		// Параметры
		ОтобранныеСтроки = пТабПараметров.НайтиСтроки(Отбор);
		
		Для каждого СтрокаОтбора Из ОтобранныеСтроки Цикл
			пТабПараметров.Удалить(СтрокаОтбора);
		КонецЦикла;
		
		// Пакеты
		ОтобранныеСтроки = пТаблицаПакетов.НайтиСтроки(Отбор);
		
		Для каждого СтрокаОтбора Из ОтобранныеСтроки Цикл
			Если НЕ СтрокаОтбора.Адрес = "" И пСтруктураТЗ.Свойство(СтрокаОтбора.Адрес) Тогда
				пСтруктураТЗ.Удалить(СтрокаОтбора.Адрес);
			КонецЕсли;
			пТаблицаПакетов.Удалить(СтрокаОтбора);
		КонецЦикла;
		
	КонецЦикла; 
	
	ПараметрыТЗ.Очистить();
	ВТ.Очистить();

КонецПроцедуры

&НаСервере
Процедура ПолучитьИДВсейВеткиИзДЗ(ВеткаДЗ, МассивИД)

	Если МассивИД = Неопределено Тогда
		МассивИД = Новый Массив;
		МассивИД.Добавить(ВеткаДЗ.ИД);
	КонецЕсли;
	
	Для каждого СтрокаДЗ Из ВеткаДЗ.Строки Цикл
		МассивИД.Добавить(СтрокаДЗ.ИД);
		ПолучитьИДВсейВеткиИзДЗ(СтрокаДЗ, МассивИД);
	КонецЦикла; 

КонецПроцедуры

&НаКлиенте
Процедура ДеревоЗапросовПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)

	СтандартнаяОбработка = Ложь;
	ИдентификаторперемещаемойСтроки = ПараметрыПеретаскивания.Значение[0];
	ПеремещаемаяСтрока = ДеревоЗапросов.НайтиПоИдентификатору(ИдентификаторперемещаемойСтроки);
	
	Если Строка = Неопределено Тогда
		МожноПеретаскивать = Истина;
	Иначе
		НовыйРодитель = ДеревоЗапросов.НайтиПоИдентификатору(Строка);
		МожноПеретаскивать = ПроверитьВозможностьПереноса(ПеремещаемаяСтрока, НовыйРодитель);
	КонецЕсли;
	
	Если МожноПеретаскивать Тогда
		ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Перемещение;
	Иначе
		ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Отмена;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоЗапросовПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)

	Если ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Перемещение Тогда
		
		ИдентификаторперемещаемойСтроки = ПараметрыПеретаскивания.Значение[0];
		ПеремещаемаяСтрока = ДеревоЗапросов.НайтиПоИдентификатору(ИдентификаторперемещаемойСтроки);
		
		Если Строка = Неопределено Тогда
			НовыйРодитель = ДеревоЗапросов;
		Иначе
			НовыйРодитель = ДеревоЗапросов.НайтиПоИдентификатору(Строка);
		КонецЕсли;
		
		СкопироватьСтрокуДерева(ДеревоЗапросов, НовыйРодитель, ПеремещаемаяСтрока);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ПроверитьВозможностьПереноса(Знач ПереносимыйЭлемент, Знач НовыйРодитель)

    Пока НЕ НовыйРодитель = Неопределено Цикл
        Если ПереносимыйЭлемент = НовыйРодитель Тогда
            Возврат Ложь;
        КонецЕсли;
        НовыйРодитель = НовыйРодитель.ПолучитьРодителя();
    КонецЦикла;

    Возврат Истина;

КонецФункции

&НаКлиенте
Функция СкопироватьСтрокуДерева(РеквизитДерево, Приемник, Источник)

    Перем НоваяСтрока, ОбратныйИндекс, КолПодчиненныхСтрок;

    Если Источник = Неопределено Тогда
        Возврат Неопределено;
    КонецЕсли;

    Если Приемник = Неопределено Тогда
        НоваяСтрока = РеквизитДерево.ПолучитьЭлементы().Добавить();
    Иначе
        НоваяСтрока = Приемник.ПолучитьЭлементы().Добавить();
    КонецЕсли;

    ЗаполнитьЗначенияСвойств(НоваяСтрока, Источник);

    КолПодчиненныхСтрок = Источник.ПолучитьЭлементы().Количество();
    Для ОбратныйИндекс = 1 По КолПодчиненныхСтрок Цикл
        ПодчиненнаяСтрока = Источник.ПолучитьЭлементы()
            [КолПодчиненныхСтрок - ОбратныйИндекс];
        СкопироватьСтрокуДерева(РеквизитДерево, НоваяСтрока, ПодчиненнаяСтрока);
    КонецЦикла;

    Если Источник.ПолучитьРодителя() = Неопределено Тогда
        РеквизитДерево.ПолучитьЭлементы().Удалить(Источник);
    Иначе
        Источник.ПолучитьРодителя().ПолучитьЭлементы().Удалить(Источник);
    КонецЕсли;

    Возврат НоваяСтрока;

КонецФункции

&НаКлиенте
Процедура ДеревоЗапросовВыполнитьВГруппеПриИзменении(Элемент)

	ТекущиеДанные = Элементы.ДеревоЗапросов.ТекущиеДанные;
	ТекущиеДанные.ВыполнитьВГруппе = ТекущиеДанные.ВыполнитьВГруппе % 2;
	ПроставитьПометкиВниз(ТекущиеДанные);
	ПроставитьПометкиВверх(ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроставитьПометкиВниз(ТекущиеДанные)
	
	Потомки = ТекущиеДанные.ПолучитьЭлементы();
	Значение = ТекущиеДанные.ВыполнитьВГруппе;
	Для каждого Потомок из Потомки Цикл
		Потомок.ВыполнитьВГруппе = Значение;
		ПроставитьПометкиВниз(Потомок);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроставитьПометкиВверх(ТекущиеДанные)
	
	Родитель = ТекущиеДанные.ПолучитьРодителя();
	Если Родитель <> Неопределено Тогда
		ВсеИстина = Истина;
		НеВсеЛожь = Ложь;
		Потомки = Родитель.ПолучитьЭлементы();
		Для каждого Потомок из Потомки Цикл
			ВсеИстина = ВсеИстина И (Потомок.ВыполнитьВГруппе = 1);
			НеВсеЛожь = НеВсеЛожь ИЛИ Булево(Потомок.ВыполнитьВГруппе);
		КонецЦикла;
		Если ВсеИстина Тогда
			Родитель.ВыполнитьВГруппе = 1;
		ИначеЕсли НеВсеЛожь Тогда
			Родитель.ВыполнитьВГруппе = 2;
		Иначе
			Родитель.ВыполнитьВГруппе = 0;
		КонецЕсли;
		ПроставитьПометкиВверх(Родитель);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьЗапросыВетки(Команда)
	
	ТекущиеДанные = Элементы.ДеревоЗапросов.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	МассивИД = Новый Массив;
	
	СобратьИДДляГрупповогоВыполненияЗапроса(ТекущиеДанные, МассивИД);
	ВыполнитьЗапросы(МассивИД);
	
КонецПроцедуры

&НаКлиенте
Процедура СобратьИДДляГрупповогоВыполненияЗапроса(Ветка, Массив)
	
	Если Ветка.ВыполнитьВГруппе Тогда
		Массив.Добавить(Ветка.ИД);
	КонецЕсли;
	
	Для каждого Сучек Из Ветка.ПолучитьЭлементы() Цикл
		СобратьИДДляГрупповогоВыполненияЗапроса(Сучек, Массив);
	КонецЦикла; 
	
КонецПроцедуры

&НаСервере
Процедура ВыполнитьЗапросы(МассивИД)
	
	МВТ = Новый МенеджерВременныхТаблиц;
	ТекДанныеДерева = ДеревоЗапросов.НайтиПоИдентификатору(Элементы.ДеревоЗапросов.ТекущаяСтрока);
	пИмя = ПолучитьИмяТекущегоТабДокаНаСервере();
	ЭтаФорма[пИмя].Очистить();
	
	Для каждого Элемент Из МассивИД Цикл
		
		СтруктураПараметров = ПолучитьИзВременногоХранилища(Объект.ПутьКХранилищу);
		ДанныеВеткиДЗ = Новый Структура;
		ДанныеВеткиДЗ.Вставить("ИД", Элемент);
		СтруктураПараметров.Вставить("ОписаниеТекущейВеткиДЗ", ДанныеВеткиДЗ);
		Объект.ПутьКХранилищу = ПоместитьВоВременноеХранилище(СтруктураПараметров, ЭтаФорма.УникальныйИдентификатор);
		
		Об = РеквизитФормыВЗначение("Объект");
		Об.ОбработатьЗапрос(, МВТ);
		ЗначениеВРеквизитФормы(Об, "Объект");
		
		ВывестиРезультат(ТекДанныеДерева.ИД = Элемент, Ложь);
		
	КонецЦикла;
	
	МВТ = Неопределено;

КонецПроцедуры 


////////////////////////////////////////////////////////////////////////
// ОПЕРАЦИИ С БУФЕРОМ ОБМЕНА

&НаКлиенте
Процедура КопироватьТекстЗапросаВБуферОбмена(Команда)
	
	ТекущиеДанные = Элементы.ДеревоЗапросов.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
		
    УстановитьТекстЗапросаВБуферОбмена(ТекущиеДанные.Текст)
	
КонецПроцедуры

&НаКлиенте
Процедура ВставитьТекстЗапросаИзБуфераОбмена(Команда)
	
	ТекущиеДанные = Элементы.ДеревоЗапросов.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Текст = ПолучитьТекстБуфераОбмена();
	ТекущиеДанные.Текст = Текст;

	ПроверитьТекстЗапроса_ПолучитьПараметры_ОбновитьДанные();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьТекстЗапросаВБуферОбмена(Текст)
	
	#Если Клиент Тогда
    ОбъектКопирования = Новый COMОбъект("htmlfile");
    ОбъектКопирования.ParentWindow.ClipboardData.Setdata("Text", Текст);
	#Иначе
	Сообщить("На сервере не работает.");
	#КонецЕсли
	
КонецПроцедуры 

&НаСервере
Функция ПолучитьТекстБуфераОбмена() Экспорт

	#Если Клиент Тогда
    ОбъектКопирования = Новый COMОбъект("htmlfile");
    Возврат ОбъектКопирования.ParentWindow.ClipboardData.Getdata("Text");
	#Иначе
	Сообщить("На сервере не работает.");
	#КонецЕсли

КонецФункции


////////////////////////////////////////////////////////////////////////
// ОРАБОТЧИКИ ИЗМЕНЯЮЩИЕ ТЕКСТА ЗАПРОСА

&НаКлиенте
Процедура ПроверитьЗапрос(Команда)
	
	ПроверитьТекстЗапроса_ПолучитьПараметры_ОбновитьДанные();
	
КонецПроцедуры

&НаКлиенте
Процедура СвернутьРазвернутьФункции(Команда)
	
	Элементы.ФункцииЯзыкаЗапросов.Видимость = НЕ Элементы.ФункцииЯзыкаЗапросов.Видимость;
	
КонецПроцедуры

&НаКлиенте
Процедура ФункцииЯзыкаЗапросовНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, Выполнение)
	
	ТекущаяСтрока = Элемент.ТекущаяСтрока;
	ТекущиеДанные = ФункцииЯзыкаЗапросов.НайтиПоИдентификатору(ТекущаяСтрока);
	Если ТекущиеДанные.ПолучитьЭлементы().Количество() = 0 Тогда
		ПараметрыПеретаскивания.Значение = ТекущиеДанные.Наименование;
	Иначе
		ПараметрыПеретаскивания.Значение = "";
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаОткрытьЗначение(Команда)
	
	Текст = Элементы.ДеревоЗапросовТекст.ВыделенныйТекст;
	
	ТекстПримера = "
	|Примеры корректного выделения текста:
	|1. Справочник.СтатьиЗатрат.АмортизационнаяПремия,
	|2. ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.БанковскиеСчета,
	|3. ПланСчетов.Хозрасчетный.СырьеИМатериалы.";
	
	Если ПустаяСтрока(Текст) Тогда
	    Сообщить("Выделите текст ссылки на предопределённый элемент." + ТекстПримера);
		Возврат;
	КонецЕсли;
	
	Текст = СтрЗаменить(Текст, "Документ"              , "Документы");
	Текст = СтрЗаменить(Текст, "Справочник"            , "Справочники");
	Текст = СтрЗаменить(Текст, "Перечисление"          , "Перечисления");
	Текст = СтрЗаменить(Текст, "ПланВидовХарактеристик", "ПланыВидовХарактеристик");
	Текст = СтрЗаменить(Текст, "ПланСчетов"            , "ПланыСчетов");
	Текст = СтрЗаменить(Текст, "ПланВидовРасчета"      , "ПланыВидовРасчета");
	Текст = СтрЗаменить(Текст, "ПустаяСсылка"          , "ПустаяСсылка()");
	
	Отмена = Ложь;
	Значение = ПолучитьЗначениеНаСервере(Текст, Отмена);
	
	Если Отмена Тогда
		Сообщить(Значение + ТекстПримера);
		Возврат;
	КонецЕсли;
	
	Если Объект.МодальностьРазрешена Тогда
		ТекстКода = "
		|ОткрытьЗначение(Значение);";
	Иначе
		ТекстКода = "
		|ПоказатьЗначение(, Значение);";
	КонецЕсли;
	
	Выполнить(ТекстКода);
	
КонецПроцедуры

&НаСервере
Функция ПолучитьЗначениеНаСервере(Текст, Отмена)
	
	Значение = Неопределено;
	Попытка
		Выполнить("Значение = " + Текст + ";");
	Исключение
		Отмена = Истина;
		Возврат ИнформацияОбОшибке().Описание;
	КонецПопытки;
	
	ЭтоСсылка = Ложь;
	
	Если Документы.ТипВсеСсылки().СодержитТип(ТипЗнч(Значение)) 
		ИЛИ Справочники.ТипВсеСсылки().СодержитТип(ТипЗнч(Значение)) 
		ИЛИ Перечисления.ТипВсеСсылки().СодержитТип(ТипЗнч(Значение)) 
		ИЛИ ПланыВидовХарактеристик.ТипВсеСсылки().СодержитТип(ТипЗнч(Значение)) 
		ИЛИ ПланыСчетов.ТипВсеСсылки().СодержитТип(ТипЗнч(Значение)) 
		ИЛИ ПланыВидовРасчета.ТипВсеСсылки().СодержитТип(ТипЗнч(Значение)) 
		 Тогда 
		ЭтоСсылка = Истина;
	КонецЕсли; 
	
	Если ЭтоСсылка И Значение.Пустая() Тогда
		Значение = "Это пустая ссылка.";
		Отмена = Истина;
	ИначеЕсли НЕ ЭтоСсылка Тогда
		Значение = "Надо выделить ссылку на предопределённый элемент.";
		Отмена = Истина;
	КонецЕсли;
	
	Возврат Значение;
	
КонецФункции

&НаКлиенте
Процедура КонструкторЗапроса(Команда)
	
	#Если НЕ ТолстыйКлиентУправляемоеПриложение Тогда
    Если ВерсияПлатформыНиже835() Тогда
        Сообщить("Внимание! Данная версия клиента платформы 1С: Предприятие 
        | не поддерживает запуск конструктора запросов.");
        Возврат;
    КонецЕсли;
    #КонецЕсли

    ТекущиеДанные = Элементы.ДеревоЗапросов.ТекущиеДанные;
    Если ТекущиеДанные = Неопределено Тогда
        Сообщить("Выберите строку дерева запросов!");
        Возврат;
	КонецЕсли;
	
	Текст = СокрЛП(ТекущиеДанные.Текст);
	
	КодПрограммы = "
	|КонструкторЗапроса = Новый КонструкторЗапроса;
	|Если Не ПустаяСтрока(Текст) Тогда
	|		КонструкторЗапроса.Текст = Текст;
	|КонецЕсли;
	|";
		
    #Если ТолстыйКлиентУправляемоеПриложение Тогда
    Попытка
        
        КодПрограммы = КодПрограммы+ "
        |КонструкторЗапроса.АвтоДобавлениеПредставлений = ТекущиеДанные.АвтоДобавлениеПредставлений;
        |КонструкторЗапроса.РежимКомпоновкиДанных        = ТекущиеДанные.РежимКомпоновкиДанных;
        |
        |Если КонструкторЗапроса.ОткрытьМодально() Тогда
        |    ТекущиеДанные.Текст = КонструкторЗапроса.Текст;
        |    ПроверитьТекстЗапроса_ПолучитьПараметры_ОбновитьДанные();
        |КонецЕсли;
        |";
        Выполнить(КодПрограммы);
    Исключение
        Сообщить(ОписаниеОшибки());
    КонецПопытки;
    
    #Иначе
        
    Попытка
		
		КодПрограммы = КодПрограммы+ "
		|КонструкторЗапроса.Показать(Новый ОписаниеОповещения(""ПослеРедактированияЗапроса"", ЭтаФорма, ТекущиеДанные));
		|";
		Выполнить(КодПрограммы);
   Исключение
        Сообщить(ОписаниеОшибки());
    КонецПопытки;
	#КонецЕсли

КонецПроцедуры

&НаКлиенте
Процедура ПослеРедактированияЗапроса(Текст, ЭлементДерева) Экспорт
        Если Не ПустаяСтрока(Текст) Тогда
            ЭлементДерева.Текст = Текст;
            ПроверитьТекстЗапроса_ПолучитьПараметры_ОбновитьДанные();
        Иначе
            Модифицированность = Ложь;
        КонецЕсли;
КонецПроцедуры

&НаСервереБезКонтекста
Функция ВерсияПлатформыНиже835()
    
    лРезультат = СравнениеСТекущейВерсией("8.3.5.1068");
    
    Возврат ?(лРезультат = -1, Истина, Ложь);    
КонецФункции

&НаСервереБезКонтекста
Функция СравнениеСТекущейВерсией(ВерсияДляСравнения)

	СисИнфо = Новый СистемнаяИнформация;
	ТекВерсия = СисИнфо.ВерсияПриложения;
	
	МассивТекущий = РазбитьСтрокуВМассивПодстрок(ТекВерсия);
	МассивДляСравнения = РазбитьСтрокуВМассивПодстрок(ВерсияДляСравнения);

	Для сч = 0 По 3 Цикл
		
		Если Число(МассивТекущий[сч]) = Число(МассивДляСравнения[сч]) Тогда
			пРезультат = 0; 
		ИначеЕсли Число(МассивТекущий[сч]) > Число(МассивДляСравнения[сч]) Тогда
			пРезультат = 1; 
			Прервать;
		ИначеЕсли Число(МассивТекущий[сч]) < Число(МассивДляСравнения[сч]) Тогда
			пРезультат = -1;
			Прервать;
		КонецЕсли; 
		
	КонецЦикла; 
	
	Возврат пРезультат;

КонецФункции

&НаСервереБезКонтекста
Функция РазбитьСтрокуВМассивПодстрок(Строка, Разделитель = ".")

	Массив = Новый Массив;
	
	Тчк = Найти(Строка, Разделитель);
	
	Пока Тчк > 0 Цикл
		Массив.Добавить(Лев(Строка, Тчк-1));
		Строка = Сред(Строка, Тчк+1);
		Тчк = Найти(Строка, Разделитель);
	КонецЦикла;
		
	Если СтрДлина(Строка) > 0 Тогда
		Массив.Добавить(Строка);
	КонецЕсли;
	
	Возврат Массив;
	

КонецФункции

&НаКлиенте
Процедура РедактироватьВыделенныйПакет(Команда)
    
    #Если НЕ ТолстыйКлиентУправляемоеПриложение Тогда
    Если ВерсияПлатформыНиже835() Тогда
        Сообщить("Внимание! Данная версия клиента платформы 1С: Предприятие 
        | не поддерживает запуск конструктора запросов.");
        Возврат;
    КонецЕсли;
    #КонецЕсли

    Текст = Элементы.ДеревоЗапросовТекст.ВыделенныйТекст;
    Если ПустаяСтрока(Текст) Тогда
    
        Сообщить("Не выделен пакет запроса для редактирования!");
        Возврат;    
    КонецЕсли;
    КодПрограммы = "
    |КонструкторЗапроса = Новый КонструкторЗапроса(Текст);
    |";
    
    #Если ТолстыйКлиентУправляемоеПриложение Тогда
    Попытка
        КодПрограммы = КодПрограммы+ "
        |КонструкторЗапроса.АвтоДобавлениеПредставлений = Ложь;
        |КонструкторЗапроса.РежимКомпоновкиДанных = Ложь;

        |Если КонструкторЗапроса.ОткрытьМодально() Тогда
        |    Текст = КонструкторЗапроса.Текст;
        |    Элементы.ДеревоЗапросовТекст.ВыделенныйТекст = Текст;
        |КонецЕсли;
        |";
        
        Выполнить(КодПрограммы);    
    Исключение
        Сообщить(ОписаниеОшибки());
    КонецПопытки;
    
    #Иначе
        
    Попытка
        пПараметры = Новый Структура("НачалоСтроки,НачалоКолонки,КонецСтроки,КонецКолонки");
		Элементы.ДеревоЗапросовТекст.ПолучитьГраницыВыделения(пПараметры.НачалоСтроки, пПараметры.НачалоКолонки, пПараметры.КонецСтроки, пПараметры.КонецКолонки);
        КодПрограммы = КодПрограммы+ "
        |КонструкторЗапроса.Показать(Новый ОписаниеОповещения(""ПослеРедактированияПакета"", ЭтаФорма, пПараметры));
        |";
        Выполнить(КодПрограммы);
    Исключение
        Сообщить(ОписаниеОшибки());
    КонецПопытки;
    #КонецЕсли
    
КонецПроцедуры

&НаКлиенте
Процедура ПослеРедактированияПакета(Текст, Параметры) Экспорт
	
	Если НЕ ПустаяСтрока(Текст) Тогда
		Элементы.ДеревоЗапросовТекст.УстановитьГраницыВыделения(Параметры.НачалоСтроки, Параметры.НачалоКолонки, Параметры.КонецСтроки, Параметры.КонецКолонки);
		Элементы.ДеревоЗапросовТекст.ВыделенныйТекст = Текст;
		
		ПроверитьТекстЗапроса_ПолучитьПараметры_ОбновитьДанные();
		Элементы.ДеревоЗапросовТекст.УстановитьГраницыВыделения(Параметры.НачалоСтроки, Параметры.НачалоКолонки, Параметры.КонецСтроки, Параметры.КонецКолонки);
	Иначе
		Модифицированность = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьПереносы(Команда)
	
	ТекущиеДанные = Элементы.ДеревоЗапросов.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
		
	ТекущиеДанные.Текст = СтрЗаменить(ТекущиеДанные.Текст, "|", "");

	//ПроверитьТекстЗапроса_ПолучитьПараметры_ОбновитьДанные();
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьКомментарий(Команда)
	
	ТекущиеДанные = Элементы.ДеревоЗапросов.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
		
    Текст = ТекущиеДанные.Текст;
    
    НачалоСтроки = 0; НачалоКолонки = 0; КонецСтроки = 0; КонецКолонки = 0;
	Элементы.ДеревоЗапросовТекст.ПолучитьГраницыВыделения(НачалоСтроки, НачалоКолонки, КонецСтроки, КонецКолонки);
	
	ТекстовыйДокумент = Новый ТекстовыйДокумент;
	ТекстовыйДокумент.УстановитьТекст(Текст);
	
	ПоследняяСтрока = ТекстовыйДокумент.ПолучитьСтроку(КонецСтроки);
	ВыделеноСимволовНаПоследнейСтроке = СтрДлина(Лев(ПоследняяСтрока, КонецКолонки - 1));
	ЗакомментироватьПоследнююСтроку = Истина;
	Если (НачалоСтроки <> КонецСтроки) И ВыделеноСимволовНаПоследнейСтроке = 0 Тогда
		ЗакомментироватьПоследнююСтроку = Ложь;
	КонецЕсли;
    
    МаксимальныйОтступ = 0;
    МинимальныйОтступ = 0;
    Для i = НачалоСтроки По КонецСтроки Цикл
        Строка = ТекстовыйДокумент.ПолучитьСтроку(i);
        Строка = СтрЗаменить(Строка, "  ", "    ");
        СимволовСлева = Найти(Строка, СокрЛП(Строка));
        МаксимальныйОтступ = Макс(СимволовСлева, МаксимальныйОтступ);
        МинимальныйОтступ = ?(МинимальныйОтступ = 0, МаксимальныйОтступ, МинимальныйОтступ);
        МинимальныйОтступ  = Мин(МаксимальныйОтступ, МинимальныйОтступ );
    КонецЦикла;
    
    ТексДляВыделения = "";
	КонСтроки = ?(ЗакомментироватьПоследнююСтроку, КонецСтроки, КонецСтроки - 1); 
    Для i = НачалоСтроки По КонСтроки Цикл
        Строка = ТекстовыйДокумент.ПолучитьСтроку(i);
        Строка = СтрЗаменить(Строка, "  ", "    ");
        Строка = Лев(Строка, МинимальныйОтступ-1) + "//" + Сред(Строка, МинимальныйОтступ);
        ТекстовыйДокумент.ЗаменитьСтроку(i, Строка);
        ТексДляВыделения = ТексДляВыделения + Символы.ПС + Строка;
    КонецЦикла;
    
    НовыйТекст = ТекстовыйДокумент.ПолучитьТекст();
    ТекущиеДанные.Текст = НовыйТекст;
    
    ЭтаФорма.ТекущийЭлемент = Элементы.ДеревоЗапросовТекст;
    ЭтаФорма.ОбновитьОтображениеДанных();    
    Элементы.ДеревоЗапросовТекст.УстановитьГраницыВыделения(НачалоСтроки, 1, КонецСтроки + ?(ЗакомментироватьПоследнююСтроку, 1, 0), 1); 

	//ПроверитьТекстЗапроса_ПолучитьПараметры_ОбновитьДанные();
    
КонецПроцедуры

&НаКлиенте
Процедура УдалитьКомментарий(Команда)
	
	ТекущиеДанные = Элементы.ДеревоЗапросов.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
		
    Текст = ТекущиеДанные.Текст;
    
    НачалоСтроки = 0; НачалоКолонки = 0; КонецСтроки = 0; КонецКолонки = 0;
    Элементы.ДеревоЗапросовТекст.ПолучитьГраницыВыделения(НачалоСтроки, НачалоКолонки, КонецСтроки, КонецКолонки);		
    
    ТекстовыйДокумент = Новый ТекстовыйДокумент;
    ТекстовыйДокумент.УстановитьТекст(Текст);
	
	ПоследняяСтрока = ТекстовыйДокумент.ПолучитьСтроку(КонецСтроки);
	ВыделеноСимволовНаПоследнейСтроке = СтрДлина(Лев(ПоследняяСтрока, КонецКолонки - 1));
	ЗакомментироватьПоследнююСтроку = Истина;
	Если (НачалоСтроки <> КонецСтроки) И ВыделеноСимволовНаПоследнейСтроке = 0 Тогда
		ЗакомментироватьПоследнююСтроку = Ложь;
	КонецЕсли;
    
	КонСтроки = ?(ЗакомментироватьПоследнююСтроку, КонецСтроки, КонецСтроки - 1); 
    Для i = НачалоСтроки По КонСтроки Цикл
        Строка = ТекстовыйДокумент.ПолучитьСтроку(i);
        Вхождение = Найти(Строка, "//");
        Если Вхождение > 0 Тогда
            Строка = Лев(Строка, Вхождение-1) + Сред(Строка, Вхождение + 2);
        КонецЕсли; 
        ТекстовыйДокумент.ЗаменитьСтроку(i, Строка);
    КонецЦикла;
    
    ТекущиеДанные.Текст = ТекстовыйДокумент.ПолучитьТекст();
    ЭтаФорма.ТекущийЭлемент = Элементы.ДеревоЗапросовТекст;
    ЭтаФорма.ОбновитьОтображениеДанных();    
    Элементы.ДеревоЗапросовТекст.УстановитьГраницыВыделения(НачалоСтроки, 1, КонецСтроки + ?(ЗакомментироватьПоследнююСтроку, 1, 0), 1);

	//ПроверитьТекстЗапроса_ПолучитьПараметры_ОбновитьДанные();
   
КонецПроцедуры
 
&НаКлиенте
Процедура ШрифтУвеличить(Команда)
	
	Размер = Элементы.ДеревоЗапросовТекст.Шрифт.Размер;
	
	Если Размер = -1 Тогда
		Размер = 10;
	КонецЕсли;
	
	Элементы.ДеревоЗапросовТекст.Шрифт = Новый Шрифт(, Размер + 1);
	
КонецПроцедуры

&НаКлиенте
Процедура ШрифтУменьшить(Команда)
	
	Размер = Элементы.ДеревоЗапросовТекст.Шрифт.Размер;
	
	Если Размер = -1 Тогда
		Размер = 10;
	КонецЕсли;
	
	Элементы.ДеревоЗапросовТекст.Шрифт = Новый Шрифт(, Размер - 1);
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоЗапросовТекстПриИзменении(Элемент)

	//ПроверитьТекстЗапроса_ПолучитьПараметры_ОбновитьДанные();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыводТекстаЗапроса(Команда)

	ТекДанныеДерева = ДеревоЗапросов.НайтиПоИдентификатору(Элементы.ДеревоЗапросов.ТекущаяСтрока);
	
	ПутьКФорме = ПолучитьИмяОбработки() + ".Форма.ФормаГенерацииТекстаДляМодуля";
	ПараметрыОткрытия = Новый Структура;
	
	ПараметрыОткрытия.Вставить("ТекстЗапроса", ТекДанныеДерева.Текст);
	ПараметрыОткрытия.Вставить("ИД", ТекДанныеДерева.ИД);
	ПараметрыОткрытия.Вставить("ПутьКХранилищу", Объект.ПутьКХранилищу);
	ПараметрыОткрытия.Вставить("РежимСовместимости", Объект.РежимСовместимости);
	
	пПутьКХранилищу = ОткрытьФорму(ПутьКФорме, ПараметрыОткрытия);
	
КонецПроцедуры

&НаКлиенте
Процедура Перевод_En_Ру(Команда)
	
	Текст = Элементы.ДеревоЗапросов.ТекущиеДанные.Текст;
	ВыполнитьПеревод(Текст, Истина);
	Элементы.ДеревоЗапросов.ТекущиеДанные.Текст = Текст;
	
	ПроверитьТекстЗапроса_ПолучитьПараметры_ОбновитьДанные();
	
КонецПроцедуры

&НаКлиенте
Процедура Перевод_Ру_En(Команда)
	
	Текст = Элементы.ДеревоЗапросов.ТекущиеДанные.Текст;
	ВыполнитьПеревод(Текст, Ложь);
	Элементы.ДеревоЗапросов.ТекущиеДанные.Текст = Текст;
	
	ПроверитьТекстЗапроса_ПолучитьПараметры_ОбновитьДанные();
	
КонецПроцедуры

&НаСервере
Процедура ВыполнитьПеревод(Текст, РусскийЯзык = Истина)

	Об = РеквизитФормыВЗначение("Объект");
	Текст = Об.ИзменитьЯзыкЗапроса(Текст, Истина, РусскийЯзык);
	ЗначениеВРеквизитФормы(Об, "Объект");

КонецПроцедуры


////////////////////////////////////////////////////////////////////////
// ОРАБОТЧИКИ ВЫПОЛНЕНИЯ ЗАПРОСА

&НаКлиенте
Процедура ВыполнитьЗапрос(Команда)
	
	ПроверитьТекстЗапроса_ПолучитьПараметры_ОбновитьДанные();
	
	Если Объект.ОшибкиВЗапросе Тогда
		Сообщить("Исправьте текст запроса!");
		Возврат;
	КонецЕсли;
	
	Состояние("Выполняется запрос."); 
	
	ВыполнитьЗапросСервер();
	
	Элементы.РедактированиеТаблицы.Пометка = Ложь;
	
	пИмя = ПолучитьИмяТекущегоТабДокаНаСервере();
	
	Элементы[пИмя].Защита = Истина;
	Элементы[пИмя].ОтображатьСетку = Ложь;
	Элементы[пИмя].ТолькоПросмотр = Ложь;
	
	Элементы.ФиксацияТабличногоДокумента.Пометка = Ложь;
	
	Состояние("Запрос выполнен."); 
	
	//А1 Начало 29.11.2018
	Элементы.ГруппаОсновныеСтраницы.ТекущаяСтраница = Элементы.ГруппаРезультатЗапроса; 
	//А1 Конец 29.11.2018
	 
КонецПроцедуры

&НаСервере
Процедура ВыполнитьЗапросСервер()
	
	ТекущаяСтрока = Элементы.ДеревоЗапросов.ТекущаяСтрока;
	
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекДанныеДерева = ДеревоЗапросов.НайтиПоИдентификатору(Элементы.ДеревоЗапросов.ТекущаяСтрока);
	
	СтруктураПараметров = ПолучитьИзВременногоХранилища(Объект.ПутьКХранилищу);
	ДанныеВеткиДЗ = Новый Структура;
	ДанныеВеткиДЗ.Вставить("Текст", ТекДанныеДерева.Текст);
	ДанныеВеткиДЗ.Вставить("ИД", ТекДанныеДерева.ИД);
	СтруктураПараметров.Вставить("ОписаниеТекущейВеткиДЗ", ДанныеВеткиДЗ);
	Объект.ПутьКХранилищу = ПоместитьВоВременноеХранилище(СтруктураПараметров, ЭтаФорма.УникальныйИдентификатор);
	
	Об = РеквизитФормыВЗначение("Объект");
	Об.ОбработатьЗапрос();
	ЗначениеВРеквизитФормы(Об, "Объект");
	ВывестиРезультат();
	
КонецПроцедуры

&НаСервере
Процедура ВывестиРезультат(ОбновитьТаблицуПакетов = Истина, ОчиститьТабДок = Истина)
	
	пХранилище = ПолучитьИзВременногоХранилища(Объект.ПутьКХранилищу);
	
	пИмя = ПолучитьИмяТекущегоТабДокаНаСервере();
	
	Если ОчиститьТабДок Тогда
		ЭтаФорма[пИмя].Очистить();
	КонецЕсли;
	
	ЭтаФорма[пИмя].Вывести(пХранилище.Результат);

	СтруктураТЗ = пХранилище.СтруктураТЗ;
	пХранилище.СтруктурыРезультатовЗапросовТабДоков.Удалить(пИмя);
	СтруктураРезультатовЗапросов = Новый Структура;
	Для каждого ЭлементСтруктуры Из пХранилище.СтруктураРезультатовЗапросов Цикл
		СтруктураРезультатовЗапросов.Вставить(ЭлементСтруктуры.Ключ, ЭлементСтруктуры.Значение);
	КонецЦикла; 
	пХранилище.СтруктурыРезультатовЗапросовТабДоков.Вставить(пИмя, СтруктураРезультатовЗапросов);
	
	Если ОбновитьТаблицуПакетов Тогда
		
		ТаблицаПакетов = ДанныеФормыВЗначение(ВТ, Тип("ТаблицаЗначений"));
		ТаблицаПакетов.Очистить();
		пТаблицаПакетов = пХранилище.ТаблицаПакетов;

		Отбор = Новый Структура("ИД", пХранилище.ОписаниеТекущейВеткиДЗ.ИД);

		пТабПакетов = пХранилище.ТаблицаПакетов;
		
		ОтобранныеСтроки = пТабПакетов.НайтиСтроки(Отбор);
		
		Для каждого СтрокаПакета Из ОтобранныеСтроки Цикл
			НовСтр = ТаблицаПакетов.Добавить();
			ЗаполнитьЗначенияСвойств(НовСтр, СтрокаПакета);
		КонецЦикла;

		ЗначениеВДанныеФормы(ТаблицаПакетов, ВТ);
		
	КонецЕсли;
	
	// SG, вставка 18/06/15 >>>
    Элементы.ВТВремяВыполнения.ТекстПодвала = ВТ.Итог("ВремяВыполнения");
    // SG, вставка 18/06/15 <<<

КонецПроцедуры


////////////////////////////////////////////////////////////////////////
// ОРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ПАРАМЕТРОВ

&НаКлиенте 
Процедура УдалитьНеиспользуемыеПараметры(Команда)

	ТекущаяСтрока = Неопределено;
	УдалитьНеиспользуемыеПараметрыНаКлиенте(ТекущаяСтрока);	
	Если НЕ ТекущаяСтрока = Неопределено Тогда
		ПараметрыТЗ.Удалить(ПараметрыТЗ.НайтиПоИдентификатору(ТекущаяСтрока));
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьТип(Команда)
	
	ТекДанныеПараметровТЗ = Элементы.ПараметрыТЗ.ТекущиеДанные;
	
	Если ТекДанныеПараметровТЗ = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИзменитьТипПараметра();
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьКодУстановкиЗначенийПеременнымПараметров(Команда)

	ТекДанныеДерева = ДеревоЗапросов.НайтиПоИдентификатору(Элементы.ДеревоЗапросов.ТекущаяСтрока);
	
	ПутьКФорме = ПолучитьИмяОбработки() + ".Форма.ФормаГенерацииТекстаПрисвоенияЗначенийПеременнымПараметров";
	ПараметрыОткрытия = Новый Структура;
	
	//ПараметрыОткрытия.Вставить("ТекстЗапроса", ТекДанныеДерева.Текст);
	ПараметрыОткрытия.Вставить("ИД", ТекДанныеДерева.ИД);
	ПараметрыОткрытия.Вставить("ПутьКХранилищу", Объект.ПутьКХранилищу);
	ПараметрыОткрытия.Вставить("РежимСовместимости", Объект.РежимСовместимости);
	
	//пПутьКХранилищу = ОткрытьФорму(ПутьКФорме, ПараметрыОткрытия);
	ОткрытьФорму(ПутьКФорме, ПараметрыОткрытия);
	
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыЗначениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ИмяПараметра = Элементы.ПараметрыТЗ.ТекущиеДанные.Название;

	Отбор = Новый Структура("ИД, Название", Элементы.ПараметрыТЗ.ТекущиеДанные.ИД, ИмяПараметра);

	ОписаниеВыбранныхТипов = ПолучитьограничениеТипаЭлементаНаСервере(Отбор);
	
	Если ОписаниеВыбранныхТипов.СписокЗначений Тогда

		Элемент.ОграничениеТипа = Новый ОписаниеТипов("СписокЗначений");
		Если ТипЗнч(Элементы.ПараметрыТЗ.ТекущиеДанные.Значение) = Тип("СписокЗначений") Тогда
			Элементы.ПараметрыТЗ.ТекущиеДанные.Значение.ТипЗначения = ОписаниеВыбранныхТипов.ОписаниеТипа;
		КонецЕсли;
		
	ИначеЕсли ОписаниеВыбранныхТипов.ОписаниеТипа = Новый ОписаниеТипов("Неопределено") Тогда
    
		СтандартнаяОбработка = Ложь;
		Элемент.ОграничениеТипа = Новый ОписаниеТипов();
		Элементы.ПараметрыТЗ.ТекущиеДанные.Значение = Неопределено;
		
	ИначеЕсли ОписаниеВыбранныхТипов.ОписаниеТипа = "ТаблицаЗначений" Тогда
    
		СтандартнаяОбработка = Ложь;
		ПараметрыОткрытия = Новый Структура;

		ПараметрыОткрытия.Вставить("ОтборПараметрЗапроса", Отбор);
		ПараметрыОткрытия.Вставить("ОбъектПутьКХранилищу", Объект.ПутьКХранилищу);

		ОткрытьФормуАвтоматически("ФормаТаблицаЗначений", ПараметрыОткрытия, "", Неопределено);

	ИначеЕсли ОписаниеВыбранныхТипов.ОписаниеТипа = "Граница" Тогда
    
		СтандартнаяОбработка = Ложь;

		ПараметрыОткрытия = Новый Структура;

		ПараметрыОткрытия.Вставить("ОтборПараметрЗапроса", Отбор);
		ПараметрыОткрытия.Вставить("ОбъектПутьКХранилищу", Объект.ПутьКХранилищу);

		ОткрытьФормуАвтоматически("ФормаГраница", ПараметрыОткрытия, "ПараметрыЗначениеНачалоВыбораЗавершение", Неопределено);

	ИначеЕсли ОписаниеВыбранныхТипов.ОписаниеТипа = Новый ОписаниеТипов("МоментВремени") Тогда
		
		СтандартнаяОбработка = Ложь;

		ПараметрыОткрытия = Новый Структура;

		ПараметрыОткрытия.Вставить("ОтборПараметрЗапроса", Отбор);
		ПараметрыОткрытия.Вставить("ОбъектПутьКХранилищу", Объект.ПутьКХранилищу);

		ОткрытьФормуАвтоматически("ФормаМоментВремени", ПараметрыОткрытия, "ПараметрыЗначениеНачалоВыбораЗавершение", Неопределено);
		
		// ++ 08.09.2015 Доработка от tristarr1
	ИначеЕсли Элементы.ПараметрыТЗ.ТекущиеДанные.Вычисляемый Тогда
		СтандартнаяОбработка = Ложь;
		ПараметрыОткрытия = Новый Структура; 
		ПараметрыОткрытия.Вставить("Параметр_Имя"     , Элементы.ПараметрыТЗ.ТекущиеДанные.Название);
		ПараметрыОткрытия.Вставить("Параметр_ИД"      , Элементы.ПараметрыТЗ.ТекущиеДанные.ИД      );

		ПараметрыОткрытия.Вставить("ПутьКХранилищу"   , Объект.ПутьКХранилищу);

		ОткрытьФормуАвтоматически("ФормаВыбораТипа", ПараметрыОткрытия, "ИзменитьТипПараметраЗавершение", ПараметрыОткрытия);

	// -- 08.09.2015 Доработка от tristarr1

	Иначе
		
		Элемент.ОграничениеТипа = ОписаниеВыбранныхТипов.ОписаниеТипа;
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПараметрыЗначениеНачалоВыбораЗавершение(ПолученоеЗначение, Параметры) Экспорт
	
	Если НЕ ПолученоеЗначение = Неопределено Тогда
		
		Элементы.ПараметрыТЗ.ТекущиеДанные.Значение = ПолученоеЗначение;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьограничениеТипаЭлементаНаСервере(Отбор)

	пХранилище = ПолучитьИзВременногоХранилища(Объект.ПутьКХранилищу);
	МассивСтрок = пХранилище.ТабПараметров.НайтиСтроки(Отбор);
	
	Если МассивСтрок.Количество() = 0 Тогда
		Возврат Новый Структура("ОписаниеТипа, СписокЗначений", Новый ОписаниеТипов("Неопределено"), Ложь);		
	КонецЕсли; 
	
	ТекПараметр =МассивСтрок[0];
	Если ТекПараметр.ОграничениеТипов.ОписаниеТипа = Новый ОписаниеТипов("ТаблицаЗначений") Тогда
		ТекПараметр.ОграничениеТипов.ОписаниеТипа = "ТаблицаЗначений";
	КонецЕсли;
	Возврат ТекПараметр.ОграничениеТипов;

КонецФункции

&НаКлиенте
Процедура ИзменитьТипПараметра()
	
	ПараметрыОткрытия = Новый Структура; 
	ПараметрыОткрытия.Вставить("Параметр_Имя"     , Элементы.ПараметрыТЗ.ТекущиеДанные.Название);
	ПараметрыОткрытия.Вставить("Параметр_ИД"      , Элементы.ПараметрыТЗ.ТекущиеДанные.ИД      );

	ПараметрыОткрытия.Вставить("ПутьКХранилищу"   , Объект.ПутьКХранилищу);

	ОткрытьФормуАвтоматически("ФормаВыбораТипа", ПараметрыОткрытия, "ИзменитьТипПараметраЗавершение", ПараметрыОткрытия);

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуАвтоматически(ИмяФормы, ПараметрыОткрытияФормы = Неопределено, ИмяПроцедуры = "", ПараметрыПроцедуры = Неопределено)

    ПутьКФорме = ПолучитьИмяОбработки() + ".Форма." + ИмяФормы;

	//Если Лев(Объект.ВерсияПриложения, 3) = "8.2" Тогда
	Если Объект.МодальностьРазрешена Тогда
		КодВыполнения = "
		|ОписаниеВыбранныхТипов = ОткрытьФормуМодально(ПутьКФорме, ПараметрыОткрытияФормы);
		|" + ИмяПроцедуры + ?(ПустаяСтрока(ИмяПроцедуры), "", "(ОписаниеВыбранныхТипов, ПараметрыПроцедуры);");
	Иначе
		КодВыполнения = "
		|" + ?(ПустаяСтрока(ИмяПроцедуры), "", "Оповещение = Новый ОписаниеОповещения(" + """" + ИмяПроцедуры + """" + ", ЭтаФорма, ПараметрыПроцедуры);") + "
		// SG, правка 16/09/15 >>>
		// Лучше открывать формы в режиме "БлокироватьОкноВладельца". Так как нужно "бегать" по данным БД не открывая другой сеанс.
		|ОткрытьФорму(ПутьКФорме, ПараметрыОткрытияФормы, , , , , " + ?(ПустаяСтрока(ИмяПроцедуры), "", "Оповещение") + ", РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);"; 
		// original
		#Область Исправлено
		//|ОткрытьФорму(ПутьКФорме, ПараметрыОткрытияФормы, , , , , " + ?(ПустаяСтрока(ИмяПроцедуры), "", "Оповещение") + ");"; 
		#КонецОбласти
		// SG, правка 16/09/15 <<<
		
	КонецЕсли;
	
	Выполнить(КодВыполнения);

КонецПроцедуры

&НаКлиенте
Процедура ИзменитьТипПараметраЗавершение(ОписаниеВыбранныхТипов, ПараметрыОткрытия) Экспорт

	Элемент = Элементы.ПараметрыЗначение;
	
	Если ОписаниеВыбранныхТипов = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Отбор = Новый Структура("ИД, Название", ПараметрыОткрытия.Параметр_ИД, ПараметрыОткрытия.Параметр_Имя);

	// ++ 08.09.2015 Доработка от tristarr1
	Элементы.ПараметрыТЗ.ТекущиеДанные.Вычисляемый = ОписаниеВыбранныхТипов.ТекстМодуля <> "";
	// -- 08.09.2015 Доработка от tristarr1

	Элементы.ПараметрыТЗ.ТекущиеДанные.Значение = ОписаниеВыбранныхТипов.ЗначениеДляКлиента;
	
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыЗначениеПриИзменении(Элемент)
	
	ПараметрыЗначениеПриИзмененииСервер();
	
КонецПроцедуры

&НаСервере
Процедура ПараметрыЗначениеПриИзмененииСервер()
	
	ТекДанныеПараметровТЗ = ПараметрыТЗ.НайтиПоИдентификатору(Элементы.ПараметрыТЗ.ТекущаяСтрока);
	Отбор = Новый Структура("ИД, Название", ТекДанныеПараметровТЗ.ИД, ТекДанныеПараметровТЗ.Название);

	пХранилище = ПолучитьИзВременногоХранилища(Объект.ПутьКХранилищу);
	ТаблПарам = пХранилище.ТабПараметров;
	ТекПараметр = ТаблПарам.НайтиСтроки(Отбор)[0]; 
	ТекПараметр.Значение = ТекДанныеПараметровТЗ.Значение;

	пХранилище.Вставить("ТабПараметров", ТаблПарам);
	Объект.ПутьКХранилищу = ПоместитьВоВременноеХранилище(пХранилище, ЭтаФорма.УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыТЗПриАктивизацииСтроки(Элемент)
	
	ТекущиеДанные = Элементы.ПараметрыТЗ.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	ИначеЕсли НЕ ПараметрыТЗ_ТекущиеДанные = Неопределено И (ПараметрыТЗ_ТекущиеДанные.ИД = ТекущиеДанные.ИД
		И ПараметрыТЗ_ТекущиеДанные.Название = ТекущиеДанные.Название) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыТЗ_ТекущиеДанные = ТекущиеДанные;
	
	ИмяПараметра = ТекущиеДанные.Название;
	
	Отбор = Новый Структура("ИД, Название", Элементы.ПараметрыТЗ.ТекущиеДанные.ИД, ИмяПараметра);
	
	ОписаниеВыбранныхТипов = ПолучитьограничениеТипаЭлементаНаСервере(Отбор);
	
	Если ОписаниеВыбранныхТипов.СписокЗначений Тогда
		
		Элементы.ПараметрыЗначение.ОграничениеТипа = Новый ОписаниеТипов("СписокЗначений");
		
	ИначеЕсли ОписаниеВыбранныхТипов.ОписаниеТипа = "ТаблицаЗначений" Тогда
		
		Элементы.ПараметрыЗначение.ОграничениеТипа = Новый ОписаниеТипов("Строка");
		
	ИначеЕсли ОписаниеВыбранныхТипов.ОписаниеТипа = "Граница" Тогда
		
		Элементы.ПараметрыЗначение.ОграничениеТипа = Новый ОписаниеТипов("Строка");
		
	ИначеЕсли ОписаниеВыбранныхТипов.ОписаниеТипа = Новый ОписаниеТипов("МоментВремени") Тогда
		
		Элементы.ПараметрыЗначение.ОграничениеТипа = Новый ОписаниеТипов("Строка");
		
	Иначе
		
		Элементы.ПараметрыЗначение.ОграничениеТипа = ОписаниеВыбранныхТипов.ОписаниеТипа;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыТЗПередУдалением(Элемент, Отказ)
	
	УдалитьНеиспользуемыеПараметрыНаКлиенте(, Отказ);	
	
КонецПроцедуры

&НаКлиенте 
Процедура УдалитьНеиспользуемыеПараметрыНаКлиенте(ТекущаяСтрока = Неопределено, Отказ = Ложь)
	
	ТекДанныеПараметровТЗ = Элементы.ПараметрыТЗ.ТекущиеДанные;
	
	Если ТекДанныеПараметровТЗ = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекДанныеПараметровТЗ.Используется Тогда
		Отказ = Истина;
		Сообщить("Отказ! Параметр используется.");
		Возврат;
	КонецЕсли;
	
	УдалитьНеиспользуемыйПараметрНаСервере();
	ТекущаяСтрока = Элементы.ПараметрыТЗ.ТекущаяСтрока;
	
КонецПроцедуры

&НаСервере
Процедура УдалитьНеиспользуемыйПараметрНаСервере()

	ТекДанныеПараметровТЗ = ПараметрыТЗ.НайтиПоИдентификатору(Элементы.ПараметрыТЗ.ТекущаяСтрока);
	
	Если ТекДанныеПараметровТЗ.Используется Тогда
		Возврат;
	КонецЕсли;
	
	Отбор = Новый Структура("ИД, Название", ТекДанныеПараметровТЗ.ИД, ТекДанныеПараметровТЗ.Название);

	пХранилище = ПолучитьИзВременногоХранилища(Объект.ПутьКХранилищу);
	ТаблПарам = пХранилище.ТабПараметров;
	ТекПараметр = ТаблПарам.НайтиСтроки(Отбор)[0];
	ТаблПарам.Удалить(ТекПараметр);
	пХранилище.Вставить("ТабПараметров", ТаблПарам);
	Объект.ПутьКХранилищу = ПоместитьВоВременноеХранилище(пХранилище, ЭтаФорма.УникальныйИдентификатор);

КонецПроцедуры


////////////////////////////////////////////////////////////////////////
// ОРАБОТЧИКИ ТАБЛИЧНОГО ДОКУМЕНТА И ЕГО КОМАНДНОЙ ПАНЕЛИ

&НаКлиенте
Процедура СвернутьВсеГруппы(Команда)

	Кнопка = Элементы.СвернутьВсеГруппы;
	
	Если Кнопка.Заголовок = "0" Тогда
	    Результат1.ПоказатьУровеньГруппировокСтрок(0);
		Кнопка.Заголовок = "1";
	Иначе
	    Результат1.ПоказатьУровеньГруппировокСтрок(Результат1.КоличествоУровнейГруппировокСтрок() - 1);
		Кнопка.Заголовок = "0";
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура РедактированиеТаблицы(Команда)
	
	Редактировать = НЕ Элементы.РедактированиеТаблицы.Пометка;
	
	Элементы.РедактированиеТаблицы.Пометка = Редактировать;

	пИмя = ПолучитьИмяТекущегоТабДокаНаСервере();
	
	Элементы[пИмя].Защита = НЕ Редактировать;
	Элементы[пИмя].ОтображатьСетку = Редактировать;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтображениеЗаголовковТабличногоДокумента(Команда)
	
	пИмя = ПолучитьИмяТекущегоТабДокаНаСервере();
	
	Элементы.ОтображениеЗаголовковТабличногоДокумента.Пометка = НЕ Элементы.ОтображениеЗаголовковТабличногоДокумента.Пометка;
	Элементы[пИмя].ОтображатьЗаголовки = Элементы.ОтображениеЗаголовковТабличногоДокумента.Пометка;

КонецПроцедуры

&НаКлиенте
Процедура ФиксацияТабличногоДокумента(Команда)
	
	пИмя = ПолучитьИмяТекущегоТабДокаНаСервере();
	
	Элементы.ФиксацияТабличногоДокумента.Пометка = НЕ Элементы.ФиксацияТабличногоДокумента.Пометка;
	УстановитьФиксацию = Элементы.ФиксацияТабличногоДокумента.Пометка;
	
	Если УстановитьФиксацию Тогда
		ТекОбл = Элементы[пИмя].ТекущаяОбласть;
		ЭтаФорма[пИмя].ФиксацияСверху = ТекОбл.Верх - 1;
		ЭтаФорма[пИмя].ФиксацияСлева = ТекОбл.Лево - 1;
	Иначе
		ЭтаФорма[пИмя].ФиксацияСверху = 0;
		ЭтаФорма[пИмя].ФиксацияСлева = 0;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РезультатВыбор(Элемент, Область, СтандартнаяОбработка)

	Если Область.Текст = "<РезультатЗапроса>" Тогда
		
		СтандартнаяОбработка = Ложь;
	    ИмяТабДокумента = Элемент.Имя;
		ИмяВыборки = Область.Расшифровка;
		
		ПараметрыОткрытия = Новый Структура;

		ПараметрыОткрытия.Вставить("ПутьКРезультатуЗапроса", Новый Структура("ИмяТабДокумента,ИмяВыборки", ИмяТабДокумента, ИмяВыборки));
		ПараметрыОткрытия.Вставить("ОбъектПутьКХранилищу", Объект.ПутьКХранилищу);

		ОткрытьФормуАвтоматически("ФормаТаблицаЗначений", ПараметрыОткрытия);
		Возврат;
	КонецЕсли; 
	
	Если Область.Примечание.Текст = "" Тогда
        
        // SG, вставка 19/05/15 >>>
        // Сообщение об открытии элемента
        Если ЗначениеЗаполнено(Область.Расшифровка) Тогда
            Состояние("Выполняется открытие элемента.",, "" + Область.Расшифровка);
        КонецЕсли;
        // SG, вставка 19/05/15 <<<
        
		Возврат;
	КонецЕсли; 
	
	ТекДанныеДерева = ДеревоЗапросов.НайтиПоИдентификатору(Элементы.ДеревоЗапросов.ТекущаяСтрока);
	ТекстРедактора = ТекДанныеДерева.Текст;
	Позиция = Найти(ТекстРедактора, Область.Примечание.Текст);
	Если Позиция > 0 Тогда
		Элементы.ДеревоЗапросовТекст.УстановитьГраницыВыделения(Позиция, Позиция + СтрДлина(Область.Примечание.Текст));
	Иначе
		Сообщить("Фрагмент текста запроса в текстовом редакторе не найден. 
		|Возможно текст запроса изменён.");
	КонецЕсли;
	ЭтаФорма.ТекущийЭлемент = Элементы.ДеревоЗапросовТекст;
	
КонецПроцедуры

&НаКлиенте
Процедура ЦветФона(Команда)

	Диалог = Новый ДиалогВыбораЦвета; 

	//Если Лев(Объект.ВерсияПриложения, 3) = "8.2" Тогда
	Если Объект.МодальностьРазрешена Тогда
		КодВыполнения = "
		|Если Диалог.Выбрать() Тогда
		|	ЦветФонаЗавершение(Диалог.Цвет, Неопределено);
		|КонецЕсли;";
	Иначе
		КодВыполнения = "
		|Оповещение = Новый ОписаниеОповещения(""ЦветФонаЗавершение"", ЭтаФорма);
		|Диалог.Показать(Оповещение);"; 
	КонецЕсли;
	
	Выполнить(КодВыполнения);

КонецПроцедуры

&НаКлиенте
Процедура ЦветФонаЗавершение(Значение, Параметры) Экспорт

	Если Значение <> Неопределено Тогда 
		пИмя = ПолучитьИмяТекущегоТабДокаНаСервере();
		ТекОбл = Элементы[пИмя].ТекущаяОбласть;
		ТекОбл.ЦветФона = Значение;
	КонецЕсли;	

КонецПроцедуры

&НаКлиенте
Процедура ЦветТекста(Команда)

	Диалог = Новый ДиалогВыбораЦвета; 

	//Если Лев(Объект.ВерсияПриложения, 3) = "8.2" Тогда
	Если Объект.МодальностьРазрешена Тогда
		КодВыполнения = "
		|Если Диалог.Выбрать() Тогда
		|	ЦветТекстаЗавершение(Диалог.Цвет, Неопределено);
		|КонецЕсли;";
	Иначе
		КодВыполнения = "
		|Оповещение = Новый ОписаниеОповещения(""ЦветТекстаЗавершение"", ЭтаФорма);
		|Диалог.Показать(Оповещение);"; 
	КонецЕсли;
	
	Выполнить(КодВыполнения);

КонецПроцедуры

&НаКлиенте
Процедура ЦветТекстаЗавершение(Значение, Параметры) Экспорт

	Если Значение <> Неопределено Тогда 
		пИмя = ПолучитьИмяТекущегоТабДокаНаСервере();
		ТекОбл = Элементы[пИмя].ТекущаяОбласть;
		ТекОбл.ЦветТекста = Значение;
	КонецЕсли;	

КонецПроцедуры

&НаКлиенте
Процедура ЦветГраницы(Команда)

	Диалог = Новый ДиалогВыбораЦвета; 

	//Если Лев(Объект.ВерсияПриложения, 3) = "8.2" Тогда
	Если Объект.МодальностьРазрешена Тогда
		КодВыполнения = "
		|Если Диалог.Выбрать() Тогда
		|	ЦветГраницыЗавершение(Диалог.Цвет, Неопределено);
		|КонецЕсли;";
	Иначе
		КодВыполнения = "
		|Оповещение = Новый ОписаниеОповещения(""ЦветГраницыЗавершение"", ЭтаФорма);
		|Диалог.Показать(Оповещение);"; 
	КонецЕсли;
	
	Выполнить(КодВыполнения);

КонецПроцедуры

&НаКлиенте
Процедура ЦветГраницыЗавершение(Значение, Параметры) Экспорт

	Если Значение <> Неопределено Тогда 
		пИмя = ПолучитьИмяТекущегоТабДокаНаСервере();
		ТекОбл = Элементы[пИмя].ТекущаяОбласть;
		ТекОбл.ЦветРамки = Значение;
	КонецЕсли;	

КонецПроцедуры

&НаКлиенте
Процедура ПоискНазад(Команда)
	
	ПоискВТабДоке(ЭтаФорма.ТекстПоиска, Ложь)
	
КонецПроцедуры

&НаКлиенте
Процедура ПоискДалее(Команда)
	
	ПоискВТабДоке(ЭтаФорма.ТекстПоиска, Истина)
	
КонецПроцедуры

&НаКлиенте
Процедура ПоискВТабДоке(Текст, НаправлениеВперед = Истина)
	
	Если Текст = "" Тогда
		Возврат;
	КонецЕсли;
	
	ИмяТабДок = ПолучитьИмяТекущегоТабДокаНаСервере();
	
	Область = ЭтаФорма[ИмяТабДок].НайтиТекст(Текст, Элементы[ИмяТабДок].ТекущаяОбласть, , , , НаправлениеВперед, Истина);
	Если НЕ ТипЗнч(Область)=Тип("Неопределено") Тогда
		 Элементы[ИмяТабДок].ТекущаяОбласть = Область;
	КонецЕсли;
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////
// ОРАБОТЧИКИ СТРАНИЦ

&НаКлиенте
Процедура СтраницыСРезультатамиПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	ТекСтраница = Элементы.СтраницыСРезультатами.ТекущаяСтраница;
	Если ТекСтраница.Заголовок = "Добавить" Тогда
		ДобавитьСтраницуНаСервере();
	КонецЕсли;
	
	пИмя = ПолучитьИмяТекущегоТабДокаНаСервере();
	Элементы.РедактированиеТаблицы.Пометка = НЕ Элементы[пИмя].Защита;
	Элементы.ОтображениеЗаголовковТабличногоДокумента.Пометка = Элементы[пИмя].ОтображатьЗаголовки;
	
	СтрокиТабДокаЗафиксированы = НЕ(ЭтаФорма[пИмя].ФиксацияСверху = 0 И ЭтаФорма[пИмя].ФиксацияСлева = 0);
	Элементы.ФиксацияТабличногоДокумента.Пометка = СтрокиТабДокаЗафиксированы;
	//Элементы.КнопкиРедактированиятабдок.Доступность = Элементы.РедактированиеТаблицы.Пометка;

	Элементы.УдалитьСтраницу.Доступность = НЕ ТекСтраница.Имя = "Страница1";

КонецПроцедуры

&НаСервере
Процедура ДобавитьСтраницуНаСервере()
	
	СчетчикСтраниц = СчетчикСтраниц + 1;
	КолСтраниц = СчетчикСтраниц;
	
	НовыйЭлемент_Имя = "Результат" + Строка(КолСтраниц);
	НовыйЭлементСтраница_Имя = "Страница" + Строка(КолСтраниц);

	ДобавляемыеРеквизиты = Новый Массив();
	Реквизит = Новый РеквизитФормы(НовыйЭлемент_Имя, Новый ОписаниеТипов("ТабличныйДокумент"));
	ДобавляемыеРеквизиты.Добавить(Реквизит);
	ИзменитьРеквизиты(ДобавляемыеРеквизиты);	

	НовыйЭлементСтраница = ЭтаФорма.Элементы.Вставить(НовыйЭлементСтраница_Имя, Тип("ГруппаФормы"), ЭтаФорма.Элементы.СтраницыСРезультатами, Элементы.СтраницыСРезультатами.ПодчиненныеЭлементы.Добавить);
	НовыйЭлементСтраница.Вид = ВидГруппыФормы.Страница;
	НовыйЭлементСтраница.Заголовок = НовыйЭлементСтраница_Имя;

	НовыйЭлемент = ЭтаФорма.Элементы.Добавить(НовыйЭлемент_Имя, Тип("ПолеФормы"), НовыйЭлементСтраница);
	НовыйЭлемент.Вид = ВидПоляФормы.ПолеТабличногоДокумента;
	НовыйЭлемент.ПутьКДанным = НовыйЭлемент_Имя;
	НовыйЭлемент.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
	//НовыйЭлемент.ОтображатьЗаголовки = Истина;
	НовыйЭлемент.ТолькоПросмотр = Истина;
	НовыйЭлемент.Защита = Истина;
	НовыйЭлемент.Редактирование = Истина;
	НовыйЭлемент.УстановитьДействие("Выбор", "РезультатВыбор"); 
	
	ЭтаФорма.Элементы.СтраницыСРезультатами.ТекущаяСтраница = НовыйЭлементСтраница;
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьСтраницу(Команда)

	ТекстВопроса = "Теущая страница будет безвозвратно удалена. Продолжить?";

	Если Объект.МодальностьРазрешена Тогда
		КодВыполнения = "
		|Результат = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
		|УдалитьСтраницуЗавершение(Результат, Неопределено);";
	Иначе
		КодВыполнения = "
		|Оповещение = Новый ОписаниеОповещения(""УдалитьСтраницуЗавершение"", ЭтаФорма);
		|ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет);"; 
	КонецЕсли;
	
	Выполнить(КодВыполнения);
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьСтраницуЗавершение(Результат, Параметры) Экспорт

	Если Результат = КодВозвратаДиалога.Да Тогда
		УдалитьСтраницуСервер();
	КонецЕсли;	
	
КонецПроцедуры

&НаСервере
Процедура УдалитьСтраницуСервер()
	
	ТекСтраница = Элементы.СтраницыСРезультатами.ТекущаяСтраница;
	
	Если ТекСтраница = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИмяТекСтраницы = ТекСтраница.Имя;
	ИмяРеквизита = СтрЗаменить(ИмяТекСтраницы, "Страница", "Результат");

	пХранилище = ПолучитьИзВременногоХранилища(Объект.ПутьКХранилищу);
	
	пХранилище.СтруктурыРезультатовЗапросовТабДоков.Удалить(ИмяРеквизита);

	Если ИмяТекСтраницы = "Страница1" Тогда
		Возврат;
	КонецЕсли;
	
	СтраницаКУдалению = Элементы.СтраницыСРезультатами.ТекущаяСтраница;
	СтраницаСлева = Элементы.СтраницыСРезультатами.ПодчиненныеЭлементы[Элементы.СтраницыСРезультатами.ПодчиненныеЭлементы.Индекс(СтраницаКУдалению) - 1];
	Элементы.СтраницыСРезультатами.ТекущаяСтраница = СтраницаСлева;
	
	Элементы.Удалить(СтраницаКУдалению);
	
	МассивУдаляемыхРеквизитов = Новый Массив;
	МассивУдаляемыхРеквизитов.Добавить(ИмяРеквизита);
	ИзменитьРеквизиты(, МассивУдаляемыхРеквизитов); 
	
	Элементы.УдалитьСтраницу.Доступность = НЕ СтраницаСлева.Имя = "Страница1";
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////
// ОРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ВТ

&НаКлиенте
Процедура ВТИмяПакетаОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекДанныеВТ = ВТ.НайтиПоИдентификатору(Элементы.ВТ.ТекущаяСтрока);
	
	Адрес = ТекДанныеВТ.Адрес;
	
	// ++ открытие редактора с пустой ТЗ
	// -- открытие редактора с пустой ТЗ
	Если Адрес = "" Тогда
		Сообщить("Таблица не выгружена!");
		Возврат;
	КонецЕсли;

	ПараметрыОткрытия = Новый Структура;

	ПараметрыОткрытия.Вставить("ПараметрАдрес", Адрес);
	ПараметрыОткрытия.Вставить("ИД", ТекДанныеВТ.ИД);
	ПараметрыОткрытия.Вставить("ОбъектПутьКХранилищу", Объект.ПутьКХранилищу);

	ОткрытьФормуАвтоматически("ФормаТаблицаЗначений", ПараметрыОткрытия, "ВТИмяПакетаОткрытиеЗавершение", Адрес);
	
КонецПроцедуры

&НаКлиенте
Процедура ВТИмяПакетаОткрытиеЗавершение(пПутьКХранилищу, Адрес) Экспорт
	
	Если НЕ пПутьКХранилищу = Неопределено Тогда
		
		УстановитьПараметрТЗНаСервере(Адрес, пПутьКХранилищу);
		
	КонецЕсли;
	
	ВТПриАктивизацииСтроки(Элементы.ВТ);
	
КонецПроцедуры

&НаКлиенте
Процедура ВТПоказатьПриИзменении(Элемент)
	
	ПриИзмененииФлагаВ_ВТСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ВТВыгрузитьПриИзменении(Элемент)
	
	ПриИзмененииФлагаВ_ВТСервер();
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииФлагаВ_ВТСервер()
	
	ТекДанныеВТ = ВТ.НайтиПоИдентификатору(Элементы.ВТ.ТекущаяСтрока);
	Отбор = Новый Структура("ИД, ИмяПакета", ТекДанныеВТ.ИД, ТекДанныеВТ.ИмяПакета);

	пХранилище = ПолучитьИзВременногоХранилища(Объект.ПутьКХранилищу);
	
	// SG, вставка 05/06/15 >>>
    // пХранилище может быть неопределено
    Если Не ЭтоАдресВременногоХранилища(пХранилище)
        И Не ТипЗнч(пХранилище) = Тип("Структура") Тогда
        Возврат;
    КонецЕсли;
    // SG, вставка 05/06/15 <<<
	
	ТаблПарам = пХранилище.ТаблицаПакетов;
	ТекПакет = ТаблПарам.НайтиСтроки(Отбор)[0]; 
	ТекПакет.Показать = ТекДанныеВТ.Показать;
	ТекПакет.Выгрузить = ТекДанныеВТ.Выгрузить;
	пХранилище.Вставить("ТаблицаПакетов", ТаблПарам);
	Объект.ПутьКХранилищу = ПоместитьВоВременноеХранилище(пХранилище, ЭтаФорма.УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ВТПриАктивизацииСтроки(Элемент)
	
	пДоступность = Истина;
	
	ИД_ТекущаейСтроки = Элементы.ВТ.ТекущаяСтрока;
	
	Если ИД_ТекущаейСтроки = Неопределено Тогда
		пДоступность = Ложь;
	Иначе
		ТекСтрока = ВТ.НайтиПоИдентификатору(ИД_ТекущаейСтроки);
		Если ТекСтрока = Неопределено Тогда
			пДоступность = Ложь;
		Иначе
			ТекСтрока = ВТ.НайтиПоИдентификатору(ИД_ТекущаейСтроки);
			пДоступность = Не ПустаяСтрока(ТекСтрока.ТекстМодуля);
		КонецЕсли;
	КонецЕсли;

	Элементы.ВТВыполнитьКодМодуля.Доступность = пДоступность;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьКодМодуля(Команда)
	
	ВыполнитьКодМодуляНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ВыполнитьКодМодуляНаСервере()
	
	ИД_ТекущаейСтроки = Элементы.ВТ.ТекущаяСтрока;
	
	Если ИД_ТекущаейСтроки = Неопределено Тогда
		Возврат;
	КонецЕсли;
		
	ТекСтрока = ВТ.НайтиПоИдентификатору(ИД_ТекущаейСтроки);
	
	Если ТекСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Если ПустаяСтрока(ТекСтрока.ТекстМодуля) Тогда
		Сообщить("Текст модуля пуст!");
		Возврат;
	КонецЕсли;
	
	Если ПустаяСтрока(ТекСтрока.Адрес) Тогда
		Сообщить("Таблица не выгружена!");
		Возврат;
	КонецЕсли;
	
	пХранилище = ПолучитьИзВременногоХранилища(Объект.ПутьКХранилищу);
	
	Результат = Неопределено;
	
	Если пХранилище.СтруктураТЗ.Свойство(ТекСтрока.Адрес, Результат) Тогда
	
		Выполнить(ТекСтрока.ТекстМодуля);
	
	КонецЕсли;

КонецПроцедуры


////////////////////////////////////////////////////////////////////////
// ОРАБОТЧИКИ СОХРАНЕНИЯ И ОТКРЫТИЯ

&НаКлиенте
Процедура ОткрытьДеревоЗапросов(Команда)

	Перем ВыбранноеИмя; 
	Перем АдресВременногоХранилища; 
	
	Если Объект.МодальностьРазрешена Тогда
		ТекстКода = "
		|Если ПоместитьФайл(АдресВременногоХранилища, ВыбранноеИмя, ВыбранноеИмя, Истина, УникальныйИдентификатор) Тогда 
		|	ОткрытьДеревоЗапросовЗавершение(Истина, АдресВременногоХранилища); 
		|КонецЕсли;";
	Иначе
		ТекстКода = "
		|Оповещение = Новый ОписаниеОповещения(""ОткрытьДеревоЗапросовЗавершение"", ЭтаФорма, Истина);
		|НачатьПомещениеФайла(Оповещение, АдресВременногоХранилища, ВыбранноеИмя, Истина, УникальныйИдентификатор);";
	КонецЕсли;
	
	Выполнить(ТекстКода);

КонецПроцедуры

&НаСервере
Процедура ОткрытьДеревоЗапросовЗавершение(Заглушка = Неопределено, АдресВременногоХранилища = Неопределено, ИмяФайла = Неопределено, Параметры = Неопределено) Экспорт
	
	ФайлВХранилище = НЕ АдресВременногоХранилища = Неопределено;
	ФайлНаДиске = НЕ ИмяФайла = Неопределено;
	
	Если ФайлВХранилище Тогда
		ПутьНаСервере = ПолучитьИмяВременногоФайла();
		ДвоичныеДанные = ПолучитьИзВременногоХранилища(АдресВременногоХранилища);
		ДвоичныеДанные.Записать(ПутьНаСервере);
	ИначеЕсли ФайлНаДиске Тогда
		ПутьНаСервере = ИмяФайла;
		пФайл = Новый Файл(ПутьНаСервере);
		Если НЕ пФайл.Существует() Тогда
	    	Сообщить("Указанный файл не найден!");
			Возврат;
		КонецЕсли;
	Иначе
		Возврат;
	КонецЕсли;

	Попытка
		ПолученноеЗначение = ЗначениеИзФайла(ПутьНаСервере);
	Исключение
	    Сообщить("Ошибка при получении файла! Описание: " + Символы.ПС + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	
	Если ФайлВХранилище Тогда
		УдалитьФайлы(ПутьНаСервере);
	КонецЕсли;

	Если НЕ ТипЗнч(ПолученноеЗначение) = Тип("Структура") Тогда
		Сообщить("Загружаемый файл не является файлом дерева запросов!");
		Возврат;
	КонецЕсли;
	
	Об = РеквизитФормыВЗначение("Объект");
	СтруктураХранилища = Об.СоздатьСтруктуру();
	ОбновитьРеквизиты(ПолученноеЗначение, СтруктураХранилища);

	лДеревоЗапросов = ДанныеФормыВЗначение(ДеревоЗапросов, Тип("ДеревоЗначений"));
	лДеревоЗапросов.Строки.Очистить();
	пХранилище = ПолучитьИзВременногоХранилища(Объект.ПутьКХранилищу);
	
	ВывестиДеревоВДерево(лДеревоЗапросов, ПолученноеЗначение.ДеревоЗапросов);
	пХранилище.Вставить("ТабПараметров", ПолученноеЗначение.ТабПараметров);
	пХранилище.Вставить("ТаблицаПакетов", ПолученноеЗначение.ТаблицаПакетов);
	пХранилище.Вставить("СтруктураТЗ", ПолученноеЗначение.СтруктураТЗ);
	
	ТД = Неопределено;
	Если пХранилище.Свойство("ВнешнийРезультат", ТД) Тогда
		Результат1.Вывести(ТД);
	КонецЕсли; 
	
    ЗначениеВДанныеФормы(лДеревоЗапросов, ДеревоЗапросов);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьДеревоЗапросовНаСервереПриложения(Команда)
	
	Значение = Новый Структура("ПутьКФайлуНаСервереПриложения", Объект.ПутьКФайлуНаСервереПриложения);
	ОткрытьФормуАвтоматически("ФормаПутиКФайлуНаСервереПриложения", Значение, "ОткрытьДеревоЗапросовНаСервереПриложенияЗавершение", Неопределено);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьДеревоЗапросовНаСервереПриложенияЗавершение(Значение, Параметры) Экспорт
	
	Если Значение = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	Объект.ПутьКФайлуНаСервереПриложения = Значение.Путь;
	
	Если ПустаяСтрока(Значение.Путь) Тогда
		Возврат;
	КонецЕсли; 
	
	Если НЕ Значение.Прочитать Тогда
		Возврат;
	КонецЕсли;
	
	ОткрытьДеревоЗапросовЗавершение(, , Объект.ПутьКФайлуНаСервереПриложения, );
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьДеревоЗапросовКак(Команда)

	Режим = РежимДиалогаВыбораФайла.Сохранение;
    ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(Режим);
	//ДиалогОткрытияФайла.ПолноеИмяФайла = "";
    ДиалогОткрытияФайла.ПолноеИмяФайла = Объект.ПутьКФайлуЗапроса;
    Текст = "ru = ""Текст""; en = ""Text""";
    Фильтр = НСтр(Текст)+"(*.txt)|*.txt";
    ДиалогОткрытияФайла.Фильтр = Фильтр;
    ДиалогОткрытияФайла.МножественныйВыбор = Ложь;
    ДиалогОткрытияФайла.Заголовок = "Выберите файл";

	Если Объект.МодальностьРазрешена Тогда
		КодВыполнения = 
		"Если ДиалогОткрытияФайла.Выбрать() Тогда
		|	СохранитьДеревоЗапросовЗавершение(ДиалогОткрытияФайла.ПолноеИмяФайла, Неопределено);
		|КонецЕсли;";
	Иначе
		КодВыполнения = "
		|Оповещение = Новый ОписаниеОповещения(""СохранитьДеревоЗапросовЗавершение"", ЭтаФорма, Неопределено);
		|ДиалогОткрытияФайла.Показать(Оповещение);"; 
	КонецЕсли;
	
	Выполнить(КодВыполнения);
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьДеревоЗапросов(Команда)
	
	Если ПустаяСтрока(Объект.ПутьКФайлуЗапроса) Тогда
		СохранитьДеревоЗапросовКак(Неопределено);
		Возврат;
	КонецЕсли;
	
	СохранитьДеревоЗапросовЗавершение(Объект.ПутьКФайлуЗапроса, Неопределено)
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьДеревоЗапросовЗавершение(Путь, Параметры) Экспорт
	
	Если Путь = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(Путь) = Тип("Строка") Тогда
		пПутьКФайлу = Путь;
	ИначеЕсли ТипЗнч(Путь) = Тип("Массив") Тогда
		пПутьКФайлу = Путь[0];
	Иначе
		Сообщить("Ошибка в имени файла!");
		Возврат;
	КонецЕсли; 

	Объект.ПутьКФайлуЗапроса = пПутьКФайлу;
	Элементы.ДеревоЗапросовСохранитьДеревоЗапросов.Доступность =  НЕ ПустаяСтрока(пПутьКФайлу);
	
	НовыйЗаголовок = Лев(Заголовок, СтрНайти(Заголовок, ". Файл: ",,,) + 8);
	Заголовок = НовыйЗаголовок + ?(ПустаяСтрока(Объект.ПутьКФайлуЗапроса), "Не сохранен", Объект.ПутьКФайлуЗапроса) + ".";
	
	Адрес = ПолучитьФайлНаСервере();
	Описание = Новый ОписаниеПередаваемогоФайла(пПутьКФайлу, Адрес);
	МассивОписаний = Новый Массив;
	МассивОписаний.Добавить(Описание);
	
	Если Объект.МодальностьРазрешена Тогда
		КодВыполнения = "
		|ПолучитьФайлы(МассивОписаний, , , Ложь);";
	Иначе
		КодВыполнения = "
		|Оповещение = Новый ОписаниеОповещения(""СохранениеФайлаНаДиск"", ЭтаФорма, Неопределено);
		|НачатьПолучениеФайлов(Оповещение, МассивОписаний, , Ложь);";
	КонецЕсли;
	
	Выполнить(КодВыполнения);
	
КонецПроцедуры

&НаСервере
Функция ПолучитьФайлНаСервере()
	
	лДеревоЗапросов = ДанныеФормыВЗначение(ДеревоЗапросов, Тип("ДеревоЗначений"));
	
	пХранилище = ПолучитьИзВременногоХранилища(Объект.ПутьКХранилищу);
	пХранилище.Вставить("ДеревоЗапросов", лДеревоЗапросов);
	
	ПутьНаСервере = ПолучитьИмяВременногоФайла();
	ЗначениеВФайл(ПутьНаСервере, пХранилище);

	Двоичное = Новый ДвоичныеДанные(ПутьНаСервере);
	Адрес = ПоместитьВоВременноеХранилище(Двоичное);
	УдалитьФайлы(ПутьНаСервере);
	Возврат Адрес;
	
КонецФункции

&НаСервере
Процедура СохранениеФайлаНаДиск(ПолученныеФайлы, Параметры) Экспорт
	// Не удалять!
КонецПроцедуры

&НаСервере
Процедура ВывестиДеревоВДерево(Приемник, Источник)

	Для каждого Строка Из Источник.Строки Цикл
		НоваяВетка = Приемник.Строки.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяВетка, Строка);
		ВывестиДеревоВДерево(НоваяВетка, Строка);
	КонецЦикла; 

КонецПроцедуры


////////////////////////////////////////////////////////////////////////
// ОРАБОТЧИКИ ПРОВЕРКИ ЗАПРОСА И ОТОБРАЖЕНИЯ

&НаСервере
Процедура ПроверитьТекстЗапроса_ПолучитьПараметры_ОбновитьДанные(ПроверитьЗапрос = Истина, ПолучитьПараметры = Истина, ОбновитьДанные = Истина)
	
	ИдСтроки = Элементы.ДеревоЗапросов.ТекущаяСтрока;
	
	Если ИдСтроки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущаяСтрока = ДеревоЗапросов.НайтиПоИдентификатору(ИдСтроки);
	
	Если НЕ ТекущаяСтрока = Неопределено Тогда
		
		ТекстЗапроса = ТекущаяСтрока.Текст;
		
		Если ПроверитьЗапрос Тогда
			ТекстЗапросаСОшибками(ТекстЗапроса);
		КонецЕсли;
		
	КонецЕсли;
	
	Если ПолучитьПараметры Тогда
		ПолучитьПараметрыИзЗапроса(ТекстЗапроса, ТекущаяСтрока.ИД);
	КонецЕсли;
	
	Если ОбновитьДанные Тогда
		ОтобразитьПараметрыНаФорме(ТекущаяСтрока.ИД);
	КонецЕсли;

	Если Объект.ОшибкиВЗапросе Тогда
		Элементы.ДеревоЗапросовТекст.ЦветТекста = Новый Цвет(255, 0, 0);
		Элементы.КомментарийКТекстуЗапроса.Видимость = Истина;
	Иначе
		Элементы.ДеревоЗапросовТекст.ЦветТекста = Новый Цвет(0, 0, 0);
		Элементы.КомментарийКТекстуЗапроса.Видимость = Ложь;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ТекстЗапросаСОшибками(ТекстЗапроса)
	
	Если ПустаяСтрока(ТекстЗапроса) Тогда
		Объект.ОшибкиВЗапросе = Ложь;
	Иначе
		Попытка
			Запрос = Новый Запрос(ТекстЗапроса);
			ПараметрыЗапроса = Запрос.НайтиПараметры();
			Объект.ОшибкиВЗапросе = Ложь;
			КомментарийКТекстуЗапроса = "";
		Исключение
			Информация = ИнформацияОбОшибке();
			ТекстОшибки = Информация.Причина.Описание;
			КомментарийКТекстуЗапроса = ТекстОшибки;
			Объект.ОшибкиВЗапросе = Истина;
		КонецПопытки;
	КонецЕсли; 

КонецПроцедуры 

&НаСервере
Процедура ПолучитьПараметрыИзЗапроса(ТекстЗапроса, ИД)

	Если Объект.ОшибкиВЗапросе Тогда
		Возврат;
	КонецЕсли;

	Об = РеквизитФормыВЗначение("Объект");
	Об.ПолучитьПараметрыЗапроса(ТекстЗапроса, ИД);
	ЗначениеВРеквизитФормы(Об, "Объект");

КонецПроцедуры

&НаСервере
Процедура ОтобразитьПараметрыНаФорме(ИД)

	Если Объект.ОшибкиВЗапросе Тогда
		Возврат;
	КонецЕсли;

	ТаблицаПараметров = ДанныеФормыВЗначение(ПараметрыТЗ, Тип("ТаблицаЗначений"));
	ТаблицаПакетов = ДанныеФормыВЗначение(ВТ, Тип("ТаблицаЗначений"));
	
	ТаблицаПараметров.Очистить();
	ТаблицаПакетов.Очистить();

	Если НЕ ИД = "" Тогда

		Отбор = Новый Структура("ИД", ИД);
		
		пХранилище = ПолучитьИзВременногоХранилища(Объект.ПутьКХранилищу);
		пТабПараметров = пХранилище.ТабПараметров;
		
		ОтобранныеСтроки = пТабПараметров.НайтиСтроки(Отбор);
		
		Для каждого СтрокаПарам Из ОтобранныеСтроки Цикл
			НовСтр = ТаблицаПараметров.Добавить();
			ЗаполнитьЗначенияСвойств(НовСтр, СтрокаПарам);
			НовСтр.Название = СтрокаПарам.Название;
			НовСтр.ИД = СтрокаПарам.ИД;
			пЗнач = СтрокаПарам.Значение;
			
			Если ТипЗнч(пЗнач) = Тип("ТаблицаЗначений") Тогда
				НовСтр.Значение = "ТаблицаЗначений";
			ИначеЕсли ТипЗнч(пЗнач) = Тип("Граница") Тогда
				НовСтр.Значение = Строка(пЗнач.ВидГраницы) + ";" + Строка(пЗнач.Значение);
			ИначеЕсли ТипЗнч(пЗнач) = Тип("Null") Тогда
				НовСтр.Значение = "Null";
			ИначеЕсли ТипЗнч(пЗнач) = Тип("Неопределено") Тогда
				НовСтр.Значение = "Неопределено";
			Иначе
				НовСтр.Значение = пЗнач;
			КонецЕсли; 
						
		КонецЦикла;

		пТабПакетов = пХранилище.ТаблицаПакетов;
		
		ОтобранныеСтроки = пТабПакетов.НайтиСтроки(Отбор);
		
		Для каждого СтрокаПакета Из ОтобранныеСтроки Цикл
			НовСтр = ТаблицаПакетов.Добавить();
			ЗаполнитьЗначенияСвойств(НовСтр, СтрокаПакета);
		КонецЦикла;
		
	КонецЕсли; 
	
	ЗначениеВДанныеФормы(ТаблицаПараметров, ПараметрыТЗ);
	ЗначениеВДанныеФормы(ТаблицаПакетов, ВТ);
	
	ТекДанныеДерева = Неопределено;

КонецПроцедуры

&НаКлиенте
Процедура СвернутьРазвернутьПараметры(Команда)

	Элементы.Параметры.Видимость = НЕ Элементы.Параметры.Видимость;
	
КонецПроцедуры

&НаКлиенте
Процедура СвернутьРазвернутьТекстЗапроса(Команда)
	
	//Элементы.ТекстИКомментарий.Видимость = НЕ Элементы.ТекстИКомментарий.Видимость;
	//Элементы.ГруппаКнопокТекстаЗапроса.Видимость = Элементы.ТекстИКомментарий.Видимость;
	Элементы.ТекстЗапроса.Видимость = НЕ Элементы.ТекстЗапроса.Видимость;
	
КонецПроцедуры

&НаКлиенте
Процедура СвернутьРазвернутьРезультат(Команда)
	
	Элементы.ГрупаРезультат.Видимость = НЕ Элементы.ГрупаРезультат.Видимость;
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////
// ВСПОМОГАТЕЛЬНЫЕ ОРАБОТЧИКИ

&НаКлиенте
Процедура КомментарийКТекстуЗапросаНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ЗакрывающаяСкоба = Найти(КомментарийКТекстуЗапроса, "}");
	Если ЗакрывающаяСкоба = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДлинаСтроки = 0;
	
	ПозицияВопроса = Найти(КомментарийКТекстуЗапроса, "<<?>>") + СтрДлина("<<?>>");
	Если ПозицияВопроса > 0 Тогда
	
		ДлинаСтроки = СтрДлина(Сред(КомментарийКТекстуЗапроса, ПозицияВопроса));
	
	КонецЕсли;
	
	Координаты = Лев(КомментарийКТекстуЗапроса, ЗакрывающаяСкоба);
	Координаты = СтрЗаменить(Координаты, "{(", "");
	Координаты = СтрЗаменить(Координаты, ")}", "");
	Координаты = СтрЗаменить(Координаты, " ", "");
	МассивКоординат = РазбитьСтрокуВМассивПодстрок(Координаты, ",");
	Элементы.ДеревоЗапросовТекст.УстановитьГраницыВыделения(Число(МассивКоординат[0]), Число(МассивКоординат[1]), Число(МассивКоординат[0]), Число(МассивКоординат[1]) + ДлинаСтроки);
	ЭтаФорма.ТекущийЭлемент = Элементы.ДеревоЗапросовТекст;
	
КонецПроцедуры

Процедура ПолучитьИдентификаторСтрокиДереваПоЗначениюПоля(ИмяПоля, ИдентификаторСтроки, КоллекцияЭлементовДерева, КлючСтроки, ПрекратитьПоиск) Экспорт
    
    Для Каждого СтрокаДерева ИЗ КоллекцияЭлементовДерева Цикл
        
        Если ПрекратитьПоиск Тогда
            Возврат;
        КонецЕсли;
        
        Если СтрокаДерева[ИмяПоля] = КлючСтроки Тогда
            
            ИдентификаторСтроки = СтрокаДерева.ПолучитьИдентификатор();
            
            ПрекратитьПоиск = Истина;
            
            Возврат;
            
        КонецЕсли;
        
        КоллекцияЭлементов = СтрокаДерева.ПолучитьЭлементы();
        
        Если КоллекцияЭлементов.Количество() > 0 Тогда
            
            ПолучитьИдентификаторСтрокиДереваПоЗначениюПоля(ИмяПоля, ИдентификаторСтроки, КоллекцияЭлементов, КлючСтроки, ПрекратитьПоиск);
            
        КонецЕсли;
        
    КонецЦикла;
    
КонецПроцедуры

&НаСервере
Функция ПолучитьИмяОбработки()
	
	Возврат РеквизитФормыВЗначение("Объект").Метаданные().ПолноеИмя();
	
КонецФункции 

&НаСервере                                                                           
Процедура УстановитьПараметрТЗНаСервере(Адрес, ПутьКХранилищу)

	// ++ открытие редактора с пустой ТЗ
	Если ПустаяСтрока(Адрес) Тогда
		Возврат;
	КонецЕсли;
	// -- открытие редактора с пустой ТЗ
	
	ТЗшка = ПолучитьИзВременногоХранилища(ПутьКХранилищу);
	
	пХранилище = ПолучитьИзВременногоХранилища(Объект.ПутьКХранилищу);
	СтруктураТЗ = пХранилище.СтруктураТЗ;
	
	Отбор = Новый Структура("Адрес", Адрес);
	МассивСтрок = пХранилище.ТаблицаПакетов.НайтиСтроки(Отбор);
	
	Если МассивСтрок.Количество() > 0 Тогда
	    ТекущаяСтрока = Элементы.ВТ.ТекущаяСтрока;
		ТекДанные = ВТ.НайтиПоИдентификатору(ТекущаяСтрока);
		ТекДанные.ТекстМодуля = МассивСтрок[0].ТекстМодуля;
	
	КонецЕсли; 

	СтруктураТЗ.Вставить(Адрес, ТЗшка);
	пХранилище.Вставить("СтруктураТЗ", СтруктураТЗ);
	Объект.ПутьКХранилищу = ПоместитьВоВременноеХранилище(пХранилище, пХранилище.УникальныйИдентификаторФормы);

КонецПроцедуры

&НаСервере                                                                                          
Функция ПолучитьИмяТекущегоТабДокаНаСервере()
	
	Возврат СтрЗаменить(Элементы.СтраницыСРезультатами.ТекущаяСтраница.Имя, "Страница", "Результат");

КонецФункции

&НаКлиенте
Процедура Инфо(Команда)
	
	СписокМеню = Новый СписокЗначений;
	СписокМеню.Добавить("http://infostart.ru/public/335504/","Домашняя страница консоли", ,БиблиотекаКартинок.ГеографическаяСхема);
	СписокМеню.Добавить("http://infostart.ru/profile/235281/public/","Все публикации автора", ,БиблиотекаКартинок.ГеографическаяСхема);
	
	//Если Объект.МодальностьЗапрещена Тогда
	Если Объект.МодальностьРазрешена Тогда
		ТекстКода = "
		|ТекСсылка = ВыбратьИзМеню(СписокМеню, Элементы.Инфо);
		|ИнфоЗавершение(ТекСсылка, Неопределено);";
	Иначе
		ТекстКода = "
		|Оповещение = Новый ОписаниеОповещения(""ИнфоЗавершение"", ЭтаФорма, Неопределено);
		|ПоказатьВыборИзМеню(Оповещение, СписокМеню, Элементы.Инфо);";
	КонецЕсли;
	
	Выполнить(ТекстКода);

КонецПроцедуры

&НаКлиенте
Процедура ИнфоЗавершение(Значение, Параметры) Экспорт
	
	Если Значение <> Неопределено Тогда
		//Если Объект.МодальностьЗапрещена Тогда
		Если Объект.МодальностьРазрешена Тогда
			ТекстКода = "
			|ЗапуститьПриложение(Значение.Значение);";
		Иначе 	
			ТекстКода = "
			|Оповещение = Новый ОписаниеОповещения(""ИнфоЗавершениеФинал"", ЭтаФорма, Неопределено);
			|НачатьЗапускПриложения(Оповещение, Значение.Значение);"; 
		КонецЕсли;
	КонецЕсли;
	
	Выполнить(ТекстКода);
	
КонецПроцедуры

&НаКлиенте
Процедура ИнфоЗавершениеФинал(Значение, Параметры) Экспорт
	
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьПредопределенноеЗначение(Команда)
	
	ПараметрыОткрытия = Новый Структура("НС, НК, КС, КК");
	Элементы.ДеревоЗапросовТекст.ПолучитьГраницыВыделения(ПараметрыОткрытия.НС, ПараметрыОткрытия.НК, ПараметрыОткрытия.КС, ПараметрыОткрытия.КК);

	ОткрытьФормуАвтоматически("ФормаВыбораПредопределенныхЭлементов", Неопределено, "ВставитьТекстЗавершение", ПараметрыОткрытия);

КонецПроцедуры

&НаКлиенте
Процедура ВставитьТекстЗавершение(Значение, ПараметрыОткрытия) Экспорт
	
	Если Значение = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Элементы.ДеревоЗапросовТекст.УстановитьГраницыВыделения(ПараметрыОткрытия.НС, ПараметрыОткрытия.НК, ПараметрыОткрытия.КС, ПараметрыОткрытия.КК);
	Элементы.ДеревоЗапросовТекст.ВыделенныйТекст = Значение;

КонецПроцедуры

&НаКлиенте
Процедура СохранитьТабличныйДокумент(Команда)

	ТекСтраница = Элементы.СтраницыСРезультатами.ТекущаяСтраница;
	Если ТекСтраница = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Режим = РежимДиалогаВыбораФайла.Сохранение;
    ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(Режим);
    ДиалогОткрытияФайла.ПолноеИмяФайла = "";
    Текст = "ru = ""Excel""; en = ""Excel""";
    Фильтр = НСтр(Текст)+"(*.xlsx)|*.xlsx";
    ДиалогОткрытияФайла.Фильтр = Фильтр;
    ДиалогОткрытияФайла.МножественныйВыбор = Ложь;
    ДиалогОткрытияФайла.Заголовок = "Выберите файл";

	Если Объект.МодальностьРазрешена Тогда
		КодВыполнения = 
		"Если ДиалогОткрытияФайла.Выбрать() Тогда
		|	СохранитьТабличныйДокументЗавершение(ДиалогОткрытияФайла.ПолноеИмяФайла, ТекСтраница);
		|КонецЕсли;";
	Иначе
		КодВыполнения = "
		|Оповещение = Новый ОписаниеОповещения(""СохранитьТабличныйДокументЗавершение"", ЭтаФорма, ТекСтраница);
		|ДиалогОткрытияФайла.Показать(Оповещение);"; 
	КонецЕсли;
	
	Выполнить(КодВыполнения);

КонецПроцедуры

&НаКлиенте
Процедура СохранитьТабличныйДокументЗавершение(Путь, ТекСтраница) Экспорт

	Если Путь = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(Путь) = Тип("Строка") Тогда
		пПутьКФайлу = Путь;
	ИначеЕсли ТипЗнч(Путь) = Тип("Массив") Тогда
		пПутьКФайлу = Путь[0];
	Иначе
		Сообщить("Ошибка в имени файла!");
		Возврат;
	КонецЕсли; 
	
	ИмяТекСтраницы = ТекСтраница.Имя;
	ИмяРеквизита = СтрЗаменить(ИмяТекСтраницы, "Страница", "Результат");
	ТабДок = ЭтаФорма[ИмяРеквизита];
	
	ТабДокДляСохранения = Новый ТабличныйДокумент;

	ВывестиТабДок(ТабДокДляСохранения, ТабДок);

	Строк = ТабДокДляСохранения.ВысотаТаблицы;
	Колонок = ТабДокДляСохранения.ШиринаТаблицы;
	
	//Массив = Новый Массив;

	Для счСтрока = 1 По Строк Цикл
		Для счКол = 1 По Колонок Цикл
			тОбл = ТабДокДляСохранения.Область(счСтрока, счКол);
			пТекст = тОбл.Примечание.Текст;
			Если НЕ ПустаяСтрока(пТекст) Тогда
				//Массив.Добавить(Новый Структура("R,C,Текст", счСтрока, счКол, тОбл.Примечание.Текст));
				тОбл.Примечание.Текст = "";
			КонецЕсли; 
		КонецЦикла; 
	КонецЦикла; 
	
	ТабДокДляСохранения.Записать(пПутьКФайлу, ТипФайлаТабличногоДокумента.XLSX);
	ТабДокДляСохранения = Неопределено;

КонецПроцедуры

&НаСервере
Процедура ВывестиТабДок(Приемник, Источник)

	 Приемник.Вывести(Источник);

КонецПроцедуры // ВывестиТабДок()

&НаКлиенте
Процедура ОткрытьРедакторТаблицЗначений(Команда)
	
	ОткрытьФормуАвтоматически("ФормаТаблицаЗначений");
	
КонецПроцедуры


