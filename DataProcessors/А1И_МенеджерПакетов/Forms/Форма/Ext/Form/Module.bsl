&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	ОтветСервера = ПолучитьHTTPОтвет("https://a1pm-server.herokuapp.com/packages");
	Чтение = Новый ЧтениеJSON;
	Чтение.УстановитьСтроку(ОтветСервера.ПолучитьТелоКакСтроку());
	СписокПакетов = ПрочитатьJSON(Чтение);
	Для Каждого Пакет Из СписокПакетов Цикл
		Строка = Пакеты.Добавить();
		Строка.Имя = Пакет.name;
		Строка.ВерсияДоступная = Пакет.version;
		Строка.Описание = Пакет.description;
		Строка.СсылкаЗагрузки = Пакет.downloadPath;
		Строка.ИзменяетДанные = Пакет.dataChange;
		Строка.СхемаВерсий = А1Э_Общее_ЗначениеСвойства(Пакет, "versionScheme");  
		СуществующееРасширение = РасширенияКонфигурации.Получить(Новый Структура("Имя", Строка.Имя));
		Если СуществующееРасширение.Количество() <> 0 Тогда
			СуществующееРасширение = СуществующееРасширение[0];
			Строка.ВерсияТекущая = СуществующееРасширение.Версия;
		КонецЕсли;
		Строка.ТекущаяБольшеДоступной = Строка.ВерсияТекущая <> "" И ВерсияБольше(Строка.ВерсияТекущая, Строка.ВерсияДоступная, Строка.СхемаВерсий);
		Строка.ДоступнаяБольшеТекущей = Строка.ВерсияТекущая <> "" И ВерсияБольше(Строка.ВерсияДоступная, Строка.ВерсияТекущая, Строка.СхемаВерсий);
		Строка.Зависимости = А1Э_Общее_ЗначениеСвойства(Пакет, "dependencies");
		Если Строка.Зависимости = Неопределено Тогда
			Строка.Зависимости = Новый Структура;
		КонецЕсли;
		МассивЗависимостей = Новый Массив;
		Для Каждого Пара Из Строка.Зависимости Цикл
			МассивЗависимостей.Добавить(Пара.Ключ);
		КонецЦикла;
		Строка.Зависимости__Представление = СтрСоединить(МассивЗависимостей, "; ");
	КонецЦикла;
	Механизмы__ПриСозданииНаСервере(Отказ, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	Механизмы__ПриОткрытии(Отказ);
	ОбновитьДанныеФормы(ЭтаФорма);
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ОбновитьДанныеФормы(Форма) Экспорт 
	Для Каждого Строка Из Форма.Пакеты Цикл
		Строка.ТекущаяБольшеДоступной = Строка.ВерсияТекущая <> "" И ВерсияБольше(Строка.ВерсияТекущая, Строка.ВерсияДоступная, Строка.СхемаВерсий);
		Строка.ДоступнаяБольшеТекущей = Строка.ВерсияТекущая <> "" И ВерсияБольше(Строка.ВерсияДоступная, Строка.ВерсияТекущая, Строка.СхемаВерсий);	
	КонецЦикла;
КонецФункции

&НаКлиенте
Процедура ОтметитьВсеОбновления(Команда)
	Для Каждого Строка Из Пакеты Цикл
		Если Строка.ВерсияТекущая = "" Тогда Продолжить; КонецЕсли;
		Если НЕ (Строка.ВерсияДоступная > Строка.ВерсияТекущая) Тогда Продолжить; КонецЕсли;
		
		Строка.Отметка = Истина;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОтмеченные(Команда)
	УстанавливаемыеИнтерактивно = Новый Соответствие; 
	ОбщиеЗависимости = Новый Соответствие;
	Для Каждого Строка Из Пакеты Цикл
		Если НЕ Строка.Отметка Тогда Продолжить; КонецЕсли;
		УстанавливаемыеИнтерактивно.Вставить(Строка.Имя, Строка);
	КонецЦикла;
	Для Каждого Пара Из УстанавливаемыеИнтерактивно Цикл
		Для Каждого ПараЗависимости Из Пара.Значение.Зависимости Цикл
			ИмяЗависимости = ПараЗависимости.Ключ;
			Если УстанавливаемыеИнтерактивно[ИмяЗависимости] <> Неопределено Тогда Продолжить; КонецЕсли;
			ОбщиеЗависимости.Вставить(ИмяЗависимости, Истина);
		КонецЦикла;
	КонецЦикла;
	УстанавливаемыеПоЗависимостям = Новый Массив;
	ВсеУстанавливаемые = Новый Массив;
	Для Каждого Пара Из ОбщиеЗависимости Цикл
		Строка = Пакеты.НайтиСтроки(Новый Структура("Имя", Пара.Ключ))[0];
		Если Строка.ДоступнаяБольшеТекущей Тогда
			УстанавливаемыеПоЗависимостям.Добавить(Пара.Ключ);
			ВсеУстанавливаемые.Добавить(Пара.Ключ);
		КонецЕсли;
	КонецЦикла;
	Для Каждого Пара Из УстанавливаемыеИнтерактивно Цикл
		ВсеУстанавливаемые.Добавить(Пара.Ключ);
	КонецЦикла;
	Контекст = Новый Структура("ВсеУстанавливаемые", ВсеУстанавливаемые);
	Если УстанавливаемыеПоЗависимостям.Количество() = 0 Тогда
		УстановитьОтмеченныеПослеВопроса(КодВозвратаДиалога.Да, Контекст);
	Иначе
		ТекстВопроса =  "Будут обновлены следующие расширения, от которых зависят выбранные:" + Символы.ПС
		+ СтрСоединить(УстанавливаемыеПоЗависимостям, ", ") + ". Продолжить установку?";
		ПоказатьВопрос(Новый ОписаниеОповещения("УстановитьОтмеченныеПослеВопроса", ЭтаФорма, Контекст), ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОтмеченныеПослеВопроса(Результат, Контекст) Экспорт 
	Если Результат <> КодВозвратаДиалога.Да Тогда Возврат; КонецЕсли; 
		
	УстановитьОтмеченныеНаСервере(Контекст.ВсеУстанавливаемые);
КонецПроцедуры

&НаСервере
Процедура УстановитьОтмеченныеНаСервере(ВсеУстанавливаемые)
	ЕстьИзмененияДанных = Ложь;
	Для Каждого Имя Из ВсеУстанавливаемые Цикл
		Строка = Пакеты.НайтиСтроки(Новый Структура("Имя", Имя))[0];
		Если Строка.ИзменяетДанные = Истина Тогда
			ЕстьИзмененияДанных = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	Если ЕстьИзмененияДанных Тогда
		Попытка
			УстановитьМонопольныйРежим(Истина);
		Исключение
			Сообщить("Не удалось установить монопольный режим (необходим для части устанавливаемых расширений)!");
		КонецПопытки;
	КонецЕсли;
	Для Каждого Имя Из ВсеУстанавливаемые Цикл
		Строка = Пакеты.НайтиСтроки(Новый Структура("Имя", Имя))[0];
		
		ИмяВременногоФайлаРасширения = ПолучитьИмяВременногоФайла(".cfe");
		СкачатьФайл(Строка.СсылкаЗагрузки, ИмяВременногоФайлаРасширения);
		ДвоичныеДанныеРасширения = Новый ДвоичныеДанные(ИмяВременногоФайлаРасширения);
		Если ЗначениеЗаполнено(Строка.ВерсияТекущая) Тогда
			Расширение = РасширенияКонфигурации.Получить(Новый Структура("Имя", Строка.Имя))[0];
		Иначе
			Расширение = РасширенияКонфигурации.Создать();
		КонецЕсли;
		Расширение.ЗащитаОтОпасныхДействий.ПредупреждатьОбОпасныхДействиях = Ложь;
		Расширение.БезопасныйРежим = Ложь;
		Расширение.ИспользоватьОсновныеРолиДляВсехПользователей = Ложь;
		Расширение.Записать(ДвоичныеДанныеРасширения);
		Строка.ВерсияТекущая = Строка.ВерсияДоступная;
		Сообщить("Было установлено расширение " + Строка.Имя + " версии " + Строка.ВерсияДоступная); 
	КонецЦикла;
	Сообщить("Для применения изменений перезайдите в систему!");
	Если МонопольныйРежим() Тогда
		УстановитьМонопольныйРежим(Ложь);
	КонецЕсли;
	ОбновитьДанныеФормы(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура СкачатьТекущий(Команда)
	Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
	Диалог.Выбрать();
	СкачатьФайл(Элементы.Пакеты.ТекущиеДанные.СсылкаЗагрузки, Диалог.ПолноеИмяФайла);
КонецПроцедуры

#Область ПолучитьФайлССервера 

&НаСервереБезКонтекста
Функция ПолучитьHTTPОтвет(Ссылка, ИмяФайла = Неопределено)
	URLРазделенный = РазделитьURL(Ссылка);
	
	ИмяСервера = URLРазделенный.ИмяСервера;
	ПутьКФайлуНаСервере = URLРазделенный.ПутьКФайлуНаСервере;
	Протокол = URLРазделенный.Протокол;
	
	Если Протокол = "https" Тогда
		Соединение = Новый HTTPСоединение(ИмяСервера, , , , , , Новый ЗащищенноеСоединениеOpenSSL);
	Иначе
		Соединение = Новый HTTPСоединение(ИмяСервера, , , , , ,);
	КонецЕсли;
	
	HTTPЗапрос = Новый HTTPЗапрос(ПутьКФайлуНаСервере, Новый Соответствие);
	HTTPЗапрос.Заголовки.Вставить("Accept-Charset", "utf-8");
	HTTPОтвет = Соединение.Получить(HTTPЗапрос, ИмяФайла);
	
	Если HTTPОтвет.КодСостояния = 301 или HTTPОтвет.КодСостояния = 302 Тогда
		НоваяСсылка = ?(ЗначениеЗаполнено(HTTPОтвет.Заголовки["location"]), HTTPОтвет.Заголовки["location"], HTTPОтвет.Заголовки["Location"]);
		Если НЕ ЗначениеЗаполнено(НоваяСсылка) Тогда
			ВызватьИсключение "Ошибка при переадресации http-запроса - не удалось определить новую ссылку!";
		КонецЕсли;
		HTTPОтвет = ПолучитьHTTPОтвет(НоваяСсылка, ИмяФайла);
	КонецЕсли;
	
	Возврат HTTPОтвет;
	
КонецФункции

&НаСервереБезКонтекста
Функция СкачатьФайл(Ссылка, Знач ИмяФайла = Неопределено)
	Если ИмяФайла = Неопределено Тогда
		ИмяФайла = ПолучитьИмяВременногоФайла();
	КонецЕсли;
	
	HTTPОтвет = ПолучитьHTTPОтвет(Ссылка, ИмяФайла);
	
	Если HTTPОтвет.КодСостояния < 200 Или HTTPОтвет.КодСостояния >= 300 Тогда
		ВызватьИсключение "Файл не был получен - код ответа " + HTTPОтвет.КодСостояния;
	КонецЕсли;
	
	Возврат ИмяФайла;
	
КонецФункции // ПолучитьФайлССервера()

&НаСервереБезКонтекста
Функция РазделитьURL(Знач URL) Экспорт
	
	СтруктураURL = СтруктураURI(URL);
	
	Результат = Новый Структура;
	Результат.Вставить("Протокол", ?(ПустаяСтрока(СтруктураURL.Схема), "http", СтруктураURL.Схема));
	Результат.Вставить("ИмяСервера", СтруктураURL.ИмяСервера);
	Результат.Вставить("ПутьКФайлуНаСервере", СтруктураURL.ПутьНаСервере);
	
	Возврат Результат;
	
КонецФункции

&НаСервереБезКонтекста
Функция СтруктураURI(Знач СтрокаURI) Экспорт
	
	СтрокаURI = СокрЛП(СтрокаURI);
	
	// схема
	Схема = "";
	Позиция = Найти(СтрокаURI, "://");
	Если Позиция > 0 Тогда
		Схема = НРег(Лев(СтрокаURI, Позиция - 1));
		СтрокаURI = Сред(СтрокаURI, Позиция + 3);
	КонецЕсли;
	
	// Строка соединения и путь на сервере.
	СтрокаСоединения = СтрокаURI;
	ПутьНаСервере = "";
	Позиция = Найти(СтрокаСоединения, "/");
	Если Позиция > 0 Тогда
		ПутьНаСервере = Сред(СтрокаСоединения, Позиция + 1);
		СтрокаСоединения = Лев(СтрокаСоединения, Позиция - 1);
	КонецЕсли;
	
	// Информация пользователя и имя сервера.
	СтрокаАвторизации = "";
	ИмяСервера = СтрокаСоединения;
	Позиция = Найти(СтрокаСоединения, "@");
	Если Позиция > 0 Тогда
		СтрокаАвторизации = Лев(СтрокаСоединения, Позиция - 1);
		ИмяСервера = Сред(СтрокаСоединения, Позиция + 1);
	КонецЕсли;
	
	// логин и пароль
	Логин = СтрокаАвторизации;
	Пароль = "";
	Позиция = Найти(СтрокаАвторизации, ":");
	Если Позиция > 0 Тогда
		Логин = Лев(СтрокаАвторизации, Позиция - 1);
		Пароль = Сред(СтрокаАвторизации, Позиция + 1);
	КонецЕсли;
	
	// хост и порт
	Хост = ИмяСервера;
	Порт = "";
	Позиция = Найти(ИмяСервера, ":");
	Если Позиция > 0 Тогда
		Хост = Лев(ИмяСервера, Позиция - 1);
		Порт = Сред(ИмяСервера, Позиция + 1);
	КонецЕсли;
	
	Результат = Новый Структура;
	Результат.Вставить("Схема", Схема);
	Результат.Вставить("Логин", Логин);
	Результат.Вставить("Пароль", Пароль);
	Результат.Вставить("ИмяСервера", ИмяСервера);
	Результат.Вставить("Хост", Хост);
	Результат.Вставить("Порт", ?(ПустаяСтрока(Порт), Неопределено, Число(Порт)));
	Результат.Вставить("ПутьНаСервере", ПутьНаСервере);
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область КомпараторВерсий

&НаКлиентеНаСервереБезКонтекста 
Функция ВерсияБольшеИлиРавно(Версия1, Версия2, Схема) 
	Возврат НЕ ВерсияБольше(Версия2, Версия1, Схема); 
КонецФункции

&НаКлиентеНаСервереБезКонтекста 
Функция ВерсияБольше(Версия1, Версия2, Схема)
	Если НЕ ЗначениеЗаполнено(Схема) Тогда Возврат Версия1 > Версия2 КонецЕсли;
	
	Версия1ПоСхеме = РазобратьПоСхеме(Версия1, Схема);
	Версия2ПоСхеме = РазобратьПоСхеме(Версия2, Схема);
	Версия1Соответствует = ТипЗнч(Версия1ПоСхеме) = Тип("Структура");
	Версия2Соответствует = ТипЗнч(Версия2ПоСхеме) = Тип("Структура");
	Если Версия1Соответствует И Версия2Соответствует Тогда
		Если Схема = "SemVer" Тогда
			Возврат Семвер_ВерсияБольше(Версия1ПоСхеме, Версия2ПоСхеме);
		Иначе
			ВызватьИсключение "Не поддерживаемый идентификатор схемы: " + Схема;
		КонецЕсли;
	ИначеЕсли НЕ Версия1Соответствует И НЕ Версия2Соответствует Тогда
		Возврат Версия1 > Версия2;
	Иначе
		//Версия, соответствующая схеме, считается более поздней (если в менеджере пакетов новая схема версий, пользователи должны обновляться).
		Возврат Версия1Соответствует;  
	КонецЕсли;
		
КонецФункции

&НаКлиентеНаСервереБезКонтекста 
Функция РазобратьПоСхеме(Версия, Схема) 
	Если Схема = "SemVer" Тогда
		Возврат СемВер_Разобрать(Версия);
	Иначе
		ВызватьИсключение "Не поддерживаемый идентификатор схемы: " + Схема;
	КонецЕсли;
КонецФункции

&НаКлиентеНаСервереБезКонтекста 
Функция СоответствуетСхеме(Версия, Схема)
	Если Схема = "" Тогда
		Возврат Истина;	
	Иначе
		Возврат ТипЗнч(РазобратьПоСхеме(Версия, Схема)) = Тип("Структура"); 
	КонецЕсли;
КонецФункции 

#КонецОбласти

#Область SemVer

// Разбирает строковое представление Семантической Версии (SemVer) на структуру данных. Если версия не соответствует спецификации, возвращает Ложь.
// Подробнее см. semver.org
// Параметры:
//  Версия	 - Строка - строковое представление Семантической Версии.
// 
// Возвращаемое значение:
//   Структура, Булево - если версия соответствует спецификации, возвращает структуру с ключами;
//    * Основная - Строка - основная (MAJOR) версия.
//    * Малая - Строка - малая (MINOR) версия.
//    * Патч - Строка - версия патча (PATCH).
//	  * ПредРелиз - Массив - содержит строковые идентификаторы предрелиза (pre-release). Может быть пустым
//	  * Сборка - Массив - содержит строковые идентификаторы сборки (build). Может быть пустым
//	В противном случае возвращает Ложь.
//
&НаКлиентеНаСервереБезКонтекста 
Функция СемВер_Разобрать(Версия)
	Семвер = Новый Структура;
	Семвер.Вставить("ПредРелиз", Новый Массив);
	Семвер.Вставить("Сборка", Новый Массив);
	
	ПерваяТочка = СтрНайти(Версия, ".");
	ВтораяТочка = СтрНайти(Версия, ".", , , 2);
	Если ВтораяТочка = 0 Тогда Возврат Ложь; КонецЕсли;
	Основная = Лев(Версия, ПерваяТочка - 1);
	Малая = Сред(Версия, ПерваяТочка + 1, ВтораяТочка - ПерваяТочка - 1);
	Если НЕ А1Э_Строки_ТолькоЦифры(Основная) Тогда Возврат Ложь; КонецЕсли;
	Если НЕ А1Э_Строки_ТолькоЦифры(Малая) Тогда Возврат Ложь; КонецЕсли;
	Семвер.Вставить("Основная", Число(Основная));
	Семвер.Вставить("Малая", Число(Малая));
	ОстатокВерсии = Сред(Версия, ВтораяТочка + 1);
	ДлинаОстатка = СтрДлина(ОстатокВерсии);
	Сч = 1;
	Пока ДлинаОстатка >= Сч И ЭтоЦифра(Сред(ОстатокВерсии, Сч, 1)) Цикл
		Сч = Сч + 1;
	КонецЦикла;
	Если Сч = 1 Тогда Возврат Ложь; КонецЕсли; //Версия патча не обнаружена.
	Семвер.Вставить("Патч", Число(Лев(ОстатокВерсии, Сч - 1)));
	ОстатокВерсии = Сред(ОстатокВерсии, Сч);
	Если СтрДлина(ОстатокВерсии) = 0 Тогда Возврат Семвер; КонецЕсли;
	Если Лев(ОстатокВерсии, 1) = "-" Тогда
		Плюс = СтрНайти(ОстатокВерсии, "+");
		Если Плюс = 0 Тогда
			ПредРелизСтрока = Сред(ОстатокВерсии, 2);
			ОстатокВерсии = "";
		Иначе
			ПредРелизСтрока = Сред(ОстатокВерсии, 2, Плюс - 2);
			ОстатокВерсии = Сред(ОстатокВерсии, Плюс);
		КонецЕсли;
		СемВер.Вставить("ПредРелиз", СтрРазделить(ПредРелизСтрока, "."));
	КонецЕсли;
	Если СтрДлина(ОстатокВерсии) = 0 Тогда Возврат Семвер; КонецЕсли;
	Если Лев(ОстатокВерсии, 1) = "+" Тогда
		СборкаСтрока = Сред(ОстатокВерсии, 2);
		ОстатокВерсии = "";
		СемВер.Вставить("Сборка", СтрРазделить(СборкаСтрока, "."));
	КонецЕсли;
	Если СтрДлина(ОстатокВерсии) = 0 Тогда Возврат Семвер; КонецЕсли;
	Возврат Ложь;
КонецФункции

&НаКлиентеНаСервереБезКонтекста 
Функция Семвер_ВерсияБольше(Версия1, Версия2) 
	Если Версия1.Основная <> Версия2.Основная Тогда Возврат Версия1.Основная > Версия2.Основная КонецЕсли;
	Если Версия1.Малая <> Версия2.Малая Тогда Возврат Версия1.Малая > Версия2.Малая КонецЕсли;
	Если Версия1.Патч <> Версия2.Патч Тогда Возврат Версия1.Патч > Версия2.Патч КонецЕсли;
	//Последовательно сравниваем предрелизные идентификаторы.
	Сч = 0;
	Пока Сч < Версия1.ПредРелиз.Количество() И Сч < Версия1.ПредРелиз.Количество() Цикл
		ПредРелиз1 = Версия1.ПредРелиз[Сч];
		ПредРелиз2 = Версия2.ПредРелиз[Сч];
		ПредРелиз1Числовой = А1Э_Строки_ТолькоЦифры(ПредРелиз1);
		ПредРелиз2Числовой = А1Э_Строки_ТолькоЦифры(ПредРелиз2);
		Если ПредРелиз1Числовой И ПредРелиз2Числовой Тогда
			ПредРелиз1Число = Число(ПредРелиз1);
			ПредРелиз2Число = Число(ПредРелиз2);
			Если ПредРелиз1Число = ПредРелиз2Число Тогда
				Продолжить;
			КонецЕсли;
			Возврат ПредРелиз1Число > ПредРелиз2Число;
		ИначеЕсли НЕ ПредРелиз1Числовой И НЕ ПредРелиз2Числовой Тогда
			Если ПредРелиз1 = ПредРелиз2 Тогда
				Продолжить;
			КонецЕсли;
			Возврат ПредРелиз1 > ПредРелиз2;
		Иначе
			Возврат НЕ ПредРелиз1Числовой;
		КонецЕсли;
	КонецЦикла;
	Возврат Версия1.ПредРелиз.Количество() > Версия2.ПредРелиз.Количество();
	//В соответствии со спецификацией сборка игнорируется при сравнении.
КонецФункции

#КонецОбласти

#Область УстановкаМеханизмов

&НаСервере
Функция Механизмы__ПриСозданииНаСервере(Отказ, СтандартнаяОбработка) Экспорт
	РасширенияА1Э = РасширенияКонфигурации.Получить(Новый Структура("Имя", "А1Э"));
	Если РасширенияА1Э.Количество() = 0 Тогда
		Механизмы__УстановитьНевозможностьУстановки(ЭтаФорма, "Для установки механизмов установите расширение А1Э!");
		Возврат Неопределено;
	КонецЕсли;
	РасширениеА1Э = РасширенияА1Э[0];
	Если НЕ ВерсияБольшеИлиРавно(РасширениеА1Э.Версия, "1.10.0", "SemVer") Тогда
		Механизмы__УстановитьНевозможностьУстановки(ЭтаФорма, "Для установки механизмов обновите расширение А1Э до версии 1.10.0 или выше!");
		Возврат Неопределено;
	КонецЕсли;
	
	РасширенияА1ЭМ = РасширенияКонфигурации.Получить(Новый Структура("Имя", "А1ЭМ"));
	Если РасширенияА1ЭМ.Количество() <> 0 Тогда
		ВерсияА1ЭМ = РасширенияА1ЭМ[0].Версия;
	Иначе
		ВерсияА1ЭМ = Неопределено;
	КонецЕсли;
	Модуль__А1Э_Механизмы = Вычислить("А1Э_Механизмы");
	Если ВерсияА1ЭМ = Неопределено Тогда
		Элементы.Механизмы__Предупреждение.Заголовок = "Механизмы готовы к установке!";
	ИначеЕсли ВерсияА1ЭМ <> Модуль__А1Э_Механизмы.РекомендуемаяВерсияРасширения() Тогда
		Элементы.Механизмы__Предупреждение.Заголовок = "Версия механизмов устарела (отличается от рекомендуемой)!";
	Иначе
		Элементы.Механизмы__Предупреждение.Заголовок = "Механизмы актуальны, установка не требуется.";
	КонецЕсли;		
КонецФункции

&НаКлиенте
Функция Механизмы__ПриОткрытии(Отказ)
	Если СтрНачинаетсяС(СтрокаСоединенияИнформационнойБазы(), "ws") Тогда
		Механизмы__УстановитьНевозможностьУстановки(ЭтаФорма, "Установка механизмов через веб-сервер невозможна (используйте файловый или клиент-серверный режим)");
		Возврат Неопределено;
	КонецЕсли;
КонецФункции

	
&НаКлиентеНаСервереБезКонтекста
Функция Механизмы__УстановитьНевозможностьУстановки(Форма, Причина)
	Форма.Элементы.Механизмы__Предупреждение.Заголовок = Причина;
	Форма.Элементы.Механизмы__Установить.Видимость = Ложь;
КонецФункции

#КонецОбласти

#Область Вспомогательно

&НаКлиентеНаСервереБезКонтекста 
Функция ЭтоЦифра(Символ)
	Возврат СтрНайти("1234567890", Символ) <> 0;	
КонецФункции 

&НаКлиентеНаСервереБезКонтекста
Функция А1Э_Общее_ЗначениеСвойства(Источник, ИмяСвойства, ЗначениеПоУмолчанию = Неопределено) 
	Структура = Новый Структура(ИмяСвойства, ЗначениеПоУмолчанию);
	ЗаполнитьЗначенияСвойств(Структура, Источник);
	Возврат Структура[ИмяСвойства];
КонецФункции

// Определяет, состоит ли строка только из цифр (или из цифр и пробелов, в зависимости от второго параметра). 
//
// Параметры:
//  Строка			 - Строка - 
//  ПробелыЗапрещены - Булево - 
// 
// Возвращаемое значение:
//   - Булево
//
&НаКлиентеНаСервереБезКонтекста
Функция А1Э_Строки_ТолькоЦифры(Знач Строка, ПробелыЗапрещены = Истина) 
		Если ТипЗнч(Строка) <> Тип("Строка") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если Не ПробелыЗапрещены Тогда
		Строка = СтрЗаменить(Строка, " ", "");
	КонецЕсли;
		
	Если СтрДлина(Строка) = 0 Тогда
		Возврат Истина;
	КонецЕсли;
	
	// Если содержит только цифры, то в результате замен должна быть получена пустая строка.
	// Проверять при помощи ПустаяСтрока нельзя, так как в исходной строке могут быть пробельные символы.
	Возврат СтрДлина(
		СтрЗаменить( СтрЗаменить( СтрЗаменить( СтрЗаменить( СтрЗаменить(
		СтрЗаменить( СтрЗаменить( СтрЗаменить( СтрЗаменить( СтрЗаменить( 
			Строка, "0", ""), "1", ""), "2", ""), "3", ""), "4", ""), "5", ""), "6", ""), "7", ""), "8", ""), "9", "")) = 0;
	
КонецФункции 

&НаКлиенте
Процедура УстановитьМеханизмы(Команда)
	Модуль__А1Э_Механизмы = Вычислить("А1Э_Механизмы");
	Модуль__А1Э_Механизмы.УстановитьРасширение();
КонецПроцедуры

#КонецОбласти 